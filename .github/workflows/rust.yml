name: Rust

on:
  push:
    branches: [main]
  pull_request:
  merge_group:

env:
  RUSTFLAGS: -Dwarnings -Dclippy::all -Dclippy::pedantic
  CARGO_HACK_ARGS: --feature-powerset --exclude-features default --group-features base64,serde,arbitrary,hex

jobs:

  complete:
    if: always()
    needs: [generate, fmt, build-and-test-msrv, build-and-test-latest, publish-dry-run]
    runs-on: ubuntu-latest
    steps:
    - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: exit 1

  generate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - run: rustup update
    - run: make clean generate
    - shell: 'script --return --quiet --command "bash {0}"'
      run: git diff --exit-code || (echo "Generated Rust code is out-of-date with the XDR .x files.\nRegenerate and test them by running 'make clean generate build test'." && exit 1)

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: cargo fmt --all --check

  build-and-test-msrv:
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        op: [build, test]
        # TODO: Address GitHub Actions concurrency limits and re-enable.
        # - os: macos-latest
        #   target: x86_64-apple-darwin
        # - os: macos-latest
        #   target: aarch64-apple-darwin
        # TODO: Address disk space usage problems and re-enable.
        # - os: windows-latest
        #   target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.sys.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - name: Get minimum supported Rust version
      id: msrv
      run: echo msrv="$(cargo metadata --format-version 1 | jq -r '.packages | .[] | select(.name == "stellar-xdr") | .rust_version')" >> $GITHUB_OUTPUT
    - name: Use the minimum supported Rust version
      run: rustup override set ${{ steps.msrv.outputs.msrv }}
    - run: rustup target add ${{ matrix.sys.target }}
    - run: cargo version
    - run: rustc version
    - uses: stellar/binaries@v12
      with:
        name: cargo-hack
        version: 0.5.16
    - if: matrix.op == 'build'
      run: cargo hack clippy $CARGO_HACK_ARGS --target ${{ matrix.sys.target }} --all-targets
    - if: matrix.op == 'test'
      run: cargo hack test $CARGO_HACK_ARGS

  build-and-test-latest:
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        op: [build, test]
        # TODO: Address GitHub Actions concurrency limits and re-enable.
        # - os: macos-latest
        #   target: x86_64-apple-darwin
        # - os: macos-latest
        #   target: aarch64-apple-darwin
        # TODO: Address disk space usage problems and re-enable.
        # - os: windows-latest
        #   target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.sys.os }}
    env:
      RUSTFLAGS:
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - name: Installing the latest supported Rust version
      run: rustup update
    - run: rustup target add ${{ matrix.sys.target }}
    - uses: stellar/binaries@v12
      with:
        name: cargo-hack
        version: 0.5.16
    - if: matrix.op == 'build'
      run: cargo hack check $CARGO_HACK_ARGS --target ${{ matrix.sys.target }} --all-targets
    - if: matrix.op == 'test'
      run: cargo hack test $CARGO_HACK_ARGS

  publish-dry-run:
    if: github.event_name == 'push' || startsWith(github.head_ref, 'release/')
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
    uses: stellar/actions/.github/workflows/rust-publish-dry-run.yml@main
    with:
      runs-on: ${{ matrix.sys.os }}
      target: ${{ matrix.sys.target }}
      cargo-hack-feature-options: --feature-powerset --exclude-features default --group-features base64,serde,arbitrary,hex
