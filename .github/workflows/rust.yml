name: Rust

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

env:
  RUSTFLAGS: -Dwarnings -Dclippy::all -Dclippy::pedantic

jobs:

  complete:
    if: always()
    needs: [generate, fmt, cargo]
    runs-on: ubuntu-latest
    steps:
    - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: exit 1

  generate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: make clean generate
    - shell: 'script --return --quiet --command "bash {0}"'
      run: git diff --exit-code || (echo "Generated Rust code is out-of-date with the XDR .x files.\nRegenerate and test them by running 'make clean generate build test'." && exit 1)

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: cargo fmt --all --check

  cargo:
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32-unknown-unknown
          test: false
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          test: true
        # TODO: Address GitHub Actions concurrency limits and re-enable.
        # - os: macos-latest
        #   target: x86_64-apple-darwin
        #   test: true
        # - os: macos-latest
        #   target: aarch64-apple-darwin
        #   test: false
        # TODO: Address disk space usage problems and re-enable.
        # - os: windows-latest
        #   target: x86_64-pc-windows-msvc
        #   test: true
    runs-on: ${{ matrix.sys.os }}
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: rustup target add ${{ matrix.sys.target }}
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: cargo-
    - uses: actions/cache@v3
      with:
        path: target/
        key: ${{ github.job }}-target-${{ strategy.job-index }}-${{ github.sha }}
        restore-keys: |
          ${{ github.job }}-target-${{ strategy.job-index }}
          ${{ github.job }}-target-
    - if: github.ref_protected
      run: rm -fr target
    - run: cargo install --locked --version 0.5.16 cargo-hack
    - if: "github.ref_protected"
      run: echo 'CARGO_HACK_ARGS=--feature-powerset' >> $GITHUB_ENV
    - if: "!github.ref_protected"
      run: echo 'CARGO_HACK_ARGS=--feature-powerset --exclude-features default --group-features base64,serde,num-bigint,arbitrary' >> $GITHUB_ENV
    - run: >
        cargo hack clippy $CARGO_HACK_ARGS
        --target ${{ matrix.sys.target }}
        --all-targets
    - if: matrix.sys.test
      run: >
        cargo hack test $CARGO_HACK_ARGS

  publish-verify:
    if: "github.ref_protected"
    needs: [complete]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: rustup target add wasm32-unknown-unknown
    - run: make publish-verify

  cargo-publish:
    if: github.event_name == 'release'
    needs: [complete]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: rustup target add wasm32-unknown-unknown
    - run: make publish
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
