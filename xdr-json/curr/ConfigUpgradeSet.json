{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "ConfigUpgradeSet",
  "description": "ConfigUpgradeSet is an XDR Struct defines as:\n\n```text struct ConfigUpgradeSet { ConfigSettingEntry updatedEntry<>; }; ```",
  "type": "object",
  "required": [
    "updated_entry"
  ],
  "properties": {
    "updated_entry": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ConfigSettingEntry"
      },
      "maxItems": 4294967295
    }
  },
  "definitions": {
    "ConfigSettingContractBandwidthV0": {
      "description": "ConfigSettingContractBandwidthV0 is an XDR Struct defines as:\n\n```text struct ConfigSettingContractBandwidthV0 { // Maximum sum of all transaction sizes in the ledger in bytes uint32 ledgerMaxTxsSizeBytes; // Maximum size in bytes for a transaction uint32 txMaxSizeBytes;\n\n// Fee for 1 KB of transaction size int64 feeTxSize1KB; }; ```",
      "type": "object",
      "required": [
        "fee_tx_size1_kb",
        "ledger_max_txs_size_bytes",
        "tx_max_size_bytes"
      ],
      "properties": {
        "fee_tx_size1_kb": {
          "type": "integer",
          "format": "int64"
        },
        "ledger_max_txs_size_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "tx_max_size_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ConfigSettingContractComputeV0": {
      "description": "ConfigSettingContractComputeV0 is an XDR Struct defines as:\n\n```text struct ConfigSettingContractComputeV0 { // Maximum instructions per ledger int64 ledgerMaxInstructions; // Maximum instructions per transaction int64 txMaxInstructions; // Cost of 10000 instructions int64 feeRatePerInstructionsIncrement;\n\n// Memory limit per transaction. Unlike instructions, there is no fee // for memory, just the limit. uint32 txMemoryLimit; }; ```",
      "type": "object",
      "required": [
        "fee_rate_per_instructions_increment",
        "ledger_max_instructions",
        "tx_max_instructions",
        "tx_memory_limit"
      ],
      "properties": {
        "fee_rate_per_instructions_increment": {
          "type": "integer",
          "format": "int64"
        },
        "ledger_max_instructions": {
          "type": "integer",
          "format": "int64"
        },
        "tx_max_instructions": {
          "type": "integer",
          "format": "int64"
        },
        "tx_memory_limit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ConfigSettingContractEventsV0": {
      "description": "ConfigSettingContractEventsV0 is an XDR Struct defines as:\n\n```text struct ConfigSettingContractEventsV0 { // Maximum size of events that a contract call can emit. uint32 txMaxContractEventsSizeBytes; // Fee for generating 1KB of contract events. int64 feeContractEvents1KB; }; ```",
      "type": "object",
      "required": [
        "fee_contract_events1_kb",
        "tx_max_contract_events_size_bytes"
      ],
      "properties": {
        "fee_contract_events1_kb": {
          "type": "integer",
          "format": "int64"
        },
        "tx_max_contract_events_size_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ConfigSettingContractExecutionLanesV0": {
      "description": "ConfigSettingContractExecutionLanesV0 is an XDR Struct defines as:\n\n```text struct ConfigSettingContractExecutionLanesV0 { // maximum number of Soroban transactions per ledger uint32 ledgerMaxTxCount; }; ```",
      "type": "object",
      "required": [
        "ledger_max_tx_count"
      ],
      "properties": {
        "ledger_max_tx_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ConfigSettingContractHistoricalDataV0": {
      "description": "ConfigSettingContractHistoricalDataV0 is an XDR Struct defines as:\n\n```text struct ConfigSettingContractHistoricalDataV0 { int64 feeHistorical1KB; // Fee for storing 1KB in archives }; ```",
      "type": "object",
      "required": [
        "fee_historical1_kb"
      ],
      "properties": {
        "fee_historical1_kb": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConfigSettingContractLedgerCostV0": {
      "description": "ConfigSettingContractLedgerCostV0 is an XDR Struct defines as:\n\n```text struct ConfigSettingContractLedgerCostV0 { // Maximum number of ledger entry read operations per ledger uint32 ledgerMaxReadLedgerEntries; // Maximum number of bytes that can be read per ledger uint32 ledgerMaxReadBytes; // Maximum number of ledger entry write operations per ledger uint32 ledgerMaxWriteLedgerEntries; // Maximum number of bytes that can be written per ledger uint32 ledgerMaxWriteBytes;\n\n// Maximum number of ledger entry read operations per transaction uint32 txMaxReadLedgerEntries; // Maximum number of bytes that can be read per transaction uint32 txMaxReadBytes; // Maximum number of ledger entry write operations per transaction uint32 txMaxWriteLedgerEntries; // Maximum number of bytes that can be written per transaction uint32 txMaxWriteBytes;\n\nint64 feeReadLedgerEntry;  // Fee per ledger entry read int64 feeWriteLedgerEntry; // Fee per ledger entry write\n\nint64 feeRead1KB;  // Fee for reading 1KB\n\n// The following parameters determine the write fee per 1KB. // Write fee grows linearly until bucket list reaches this size int64 bucketListTargetSizeBytes; // Fee per 1KB write when the bucket list is empty int64 writeFee1KBBucketListLow; // Fee per 1KB write when the bucket list has reached `bucketListTargetSizeBytes` int64 writeFee1KBBucketListHigh; // Write fee multiplier for any additional data past the first `bucketListTargetSizeBytes` uint32 bucketListWriteFeeGrowthFactor; }; ```",
      "type": "object",
      "required": [
        "bucket_list_target_size_bytes",
        "bucket_list_write_fee_growth_factor",
        "fee_read1_kb",
        "fee_read_ledger_entry",
        "fee_write_ledger_entry",
        "ledger_max_read_bytes",
        "ledger_max_read_ledger_entries",
        "ledger_max_write_bytes",
        "ledger_max_write_ledger_entries",
        "tx_max_read_bytes",
        "tx_max_read_ledger_entries",
        "tx_max_write_bytes",
        "tx_max_write_ledger_entries",
        "write_fee1_kb_bucket_list_high",
        "write_fee1_kb_bucket_list_low"
      ],
      "properties": {
        "bucket_list_target_size_bytes": {
          "type": "integer",
          "format": "int64"
        },
        "bucket_list_write_fee_growth_factor": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "fee_read1_kb": {
          "type": "integer",
          "format": "int64"
        },
        "fee_read_ledger_entry": {
          "type": "integer",
          "format": "int64"
        },
        "fee_write_ledger_entry": {
          "type": "integer",
          "format": "int64"
        },
        "ledger_max_read_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ledger_max_read_ledger_entries": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ledger_max_write_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "ledger_max_write_ledger_entries": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "tx_max_read_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "tx_max_read_ledger_entries": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "tx_max_write_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "tx_max_write_ledger_entries": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "write_fee1_kb_bucket_list_high": {
          "type": "integer",
          "format": "int64"
        },
        "write_fee1_kb_bucket_list_low": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ConfigSettingEntry": {
      "description": "ConfigSettingEntry is an XDR Union defines as:\n\n```text union ConfigSettingEntry switch (ConfigSettingID configSettingID) { case CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES: uint32 contractMaxSizeBytes; case CONFIG_SETTING_CONTRACT_COMPUTE_V0: ConfigSettingContractComputeV0 contractCompute; case CONFIG_SETTING_CONTRACT_LEDGER_COST_V0: ConfigSettingContractLedgerCostV0 contractLedgerCost; case CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0: ConfigSettingContractHistoricalDataV0 contractHistoricalData; case CONFIG_SETTING_CONTRACT_EVENTS_V0: ConfigSettingContractEventsV0 contractEvents; case CONFIG_SETTING_CONTRACT_BANDWIDTH_V0: ConfigSettingContractBandwidthV0 contractBandwidth; case CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS: ContractCostParams contractCostParamsCpuInsns; case CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES: ContractCostParams contractCostParamsMemBytes; case CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES: uint32 contractDataKeySizeBytes; case CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES: uint32 contractDataEntrySizeBytes; case CONFIG_SETTING_STATE_ARCHIVAL: StateArchivalSettings stateArchivalSettings; case CONFIG_SETTING_CONTRACT_EXECUTION_LANES: ConfigSettingContractExecutionLanesV0 contractExecutionLanes; case CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW: uint64 bucketListSizeWindow<>; case CONFIG_SETTING_EVICTION_ITERATOR: EvictionIterator evictionIterator; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "contract_max_size_bytes"
          ],
          "properties": {
            "contract_max_size_bytes": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_compute_v0"
          ],
          "properties": {
            "contract_compute_v0": {
              "$ref": "#/definitions/ConfigSettingContractComputeV0"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_ledger_cost_v0"
          ],
          "properties": {
            "contract_ledger_cost_v0": {
              "$ref": "#/definitions/ConfigSettingContractLedgerCostV0"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_historical_data_v0"
          ],
          "properties": {
            "contract_historical_data_v0": {
              "$ref": "#/definitions/ConfigSettingContractHistoricalDataV0"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_events_v0"
          ],
          "properties": {
            "contract_events_v0": {
              "$ref": "#/definitions/ConfigSettingContractEventsV0"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_bandwidth_v0"
          ],
          "properties": {
            "contract_bandwidth_v0": {
              "$ref": "#/definitions/ConfigSettingContractBandwidthV0"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_cost_params_cpu_instructions"
          ],
          "properties": {
            "contract_cost_params_cpu_instructions": {
              "$ref": "#/definitions/ContractCostParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_cost_params_memory_bytes"
          ],
          "properties": {
            "contract_cost_params_memory_bytes": {
              "$ref": "#/definitions/ContractCostParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_data_key_size_bytes"
          ],
          "properties": {
            "contract_data_key_size_bytes": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_data_entry_size_bytes"
          ],
          "properties": {
            "contract_data_entry_size_bytes": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "state_archival"
          ],
          "properties": {
            "state_archival": {
              "$ref": "#/definitions/StateArchivalSettings"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_execution_lanes"
          ],
          "properties": {
            "contract_execution_lanes": {
              "$ref": "#/definitions/ConfigSettingContractExecutionLanesV0"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "bucketlist_size_window"
          ],
          "properties": {
            "bucketlist_size_window": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "maxItems": 4294967295
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "eviction_iterator"
          ],
          "properties": {
            "eviction_iterator": {
              "$ref": "#/definitions/EvictionIterator"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ContractCostParamEntry": {
      "description": "ContractCostParamEntry is an XDR Struct defines as:\n\n```text struct ContractCostParamEntry { // use `ext` to add more terms (e.g. higher order polynomials) in the future ExtensionPoint ext;\n\nint64 constTerm; int64 linearTerm; }; ```",
      "type": "object",
      "required": [
        "const_term",
        "ext",
        "linear_term"
      ],
      "properties": {
        "const_term": {
          "type": "integer",
          "format": "int64"
        },
        "ext": {
          "$ref": "#/definitions/ExtensionPoint"
        },
        "linear_term": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ContractCostParams": {
      "description": "ContractCostParams is an XDR Typedef defines as:\n\n```text typedef ContractCostParamEntry ContractCostParams<CONTRACT_COST_COUNT_LIMIT>; ```",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ContractCostParamEntry"
      },
      "maxItems": 1024
    },
    "EvictionIterator": {
      "description": "EvictionIterator is an XDR Struct defines as:\n\n```text struct EvictionIterator { uint32 bucketListLevel; bool isCurrBucket; uint64 bucketFileOffset; }; ```",
      "type": "object",
      "required": [
        "bucket_file_offset",
        "bucket_list_level",
        "is_curr_bucket"
      ],
      "properties": {
        "bucket_file_offset": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "bucket_list_level": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "is_curr_bucket": {
          "type": "boolean"
        }
      }
    },
    "ExtensionPoint": {
      "description": "ExtensionPoint is an XDR Union defines as:\n\n```text union ExtensionPoint switch (int v) { case 0: void; }; ```",
      "type": "string",
      "enum": [
        "v0"
      ]
    },
    "StateArchivalSettings": {
      "description": "StateArchivalSettings is an XDR Struct defines as:\n\n```text struct StateArchivalSettings { uint32 maxEntryTTL; uint32 minTemporaryTTL; uint32 minPersistentTTL;\n\n// rent_fee = wfee_rate_average / rent_rate_denominator_for_type int64 persistentRentRateDenominator; int64 tempRentRateDenominator;\n\n// max number of entries that emit archival meta in a single ledger uint32 maxEntriesToArchive;\n\n// Number of snapshots to use when calculating average BucketList size uint32 bucketListSizeWindowSampleSize;\n\n// How often to sample the BucketList size for the average, in ledgers uint32 bucketListWindowSamplePeriod;\n\n// Maximum number of bytes that we scan for eviction per ledger uint32 evictionScanSize;\n\n// Lowest BucketList level to be scanned to evict entries uint32 startingEvictionScanLevel; }; ```",
      "type": "object",
      "required": [
        "bucket_list_size_window_sample_size",
        "bucket_list_window_sample_period",
        "eviction_scan_size",
        "max_entries_to_archive",
        "max_entry_ttl",
        "min_persistent_ttl",
        "min_temporary_ttl",
        "persistent_rent_rate_denominator",
        "starting_eviction_scan_level",
        "temp_rent_rate_denominator"
      ],
      "properties": {
        "bucket_list_size_window_sample_size": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "bucket_list_window_sample_period": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "eviction_scan_size": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_entries_to_archive": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_entry_ttl": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_persistent_ttl": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_temporary_ttl": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "persistent_rent_rate_denominator": {
          "type": "integer",
          "format": "int64"
        },
        "starting_eviction_scan_level": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "temp_rent_rate_denominator": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}