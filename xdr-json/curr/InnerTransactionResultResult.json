{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "InnerTransactionResultResult",
  "description": "InnerTransactionResultResult is an XDR NestedUnion defines as:\n\n```text union switch (TransactionResultCode code) { // txFEE_BUMP_INNER_SUCCESS is not included case txSUCCESS: case txFAILED: OperationResult results<>; case txTOO_EARLY: case txTOO_LATE: case txMISSING_OPERATION: case txBAD_SEQ: case txBAD_AUTH: case txINSUFFICIENT_BALANCE: case txNO_ACCOUNT: case txINSUFFICIENT_FEE: case txBAD_AUTH_EXTRA: case txINTERNAL_ERROR: case txNOT_SUPPORTED: // txFEE_BUMP_INNER_FAILED is not included case txBAD_SPONSORSHIP: case txBAD_MIN_SEQ_AGE_OR_GAP: case txMALFORMED: case txSOROBAN_INVALID: void; } ```",
  "oneOf": [
    {
      "type": "string",
      "enum": [
        "tx_too_early",
        "tx_too_late",
        "tx_missing_operation",
        "tx_bad_seq",
        "tx_bad_auth",
        "tx_insufficient_balance",
        "tx_no_account",
        "tx_insufficient_fee",
        "tx_bad_auth_extra",
        "tx_internal_error",
        "tx_not_supported",
        "tx_bad_sponsorship",
        "tx_bad_min_seq_age_or_gap",
        "tx_malformed",
        "tx_soroban_invalid"
      ]
    },
    {
      "type": "object",
      "required": [
        "tx_success"
      ],
      "properties": {
        "tx_success": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationResult"
          },
          "maxItems": 4294967295
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "tx_failed"
      ],
      "properties": {
        "tx_failed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OperationResult"
          },
          "maxItems": 4294967295
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AccountId": {
      "type": "string"
    },
    "AccountMergeResult": {
      "description": "AccountMergeResult is an XDR Union defines as:\n\n```text union AccountMergeResult switch (AccountMergeResultCode code) { case ACCOUNT_MERGE_SUCCESS: int64 sourceAccountBalance; // how much got transferred from source account case ACCOUNT_MERGE_MALFORMED: case ACCOUNT_MERGE_NO_ACCOUNT: case ACCOUNT_MERGE_IMMUTABLE_SET: case ACCOUNT_MERGE_HAS_SUB_ENTRIES: case ACCOUNT_MERGE_SEQNUM_TOO_FAR: case ACCOUNT_MERGE_DEST_FULL: case ACCOUNT_MERGE_IS_SPONSOR: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "malformed",
            "no_account",
            "immutable_set",
            "has_sub_entries",
            "seqnum_too_far",
            "dest_full",
            "is_sponsor"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AllowTrustResult": {
      "description": "AllowTrustResult is an XDR Union defines as:\n\n```text union AllowTrustResult switch (AllowTrustResultCode code) { case ALLOW_TRUST_SUCCESS: void; case ALLOW_TRUST_MALFORMED: case ALLOW_TRUST_NO_TRUST_LINE: case ALLOW_TRUST_TRUST_NOT_REQUIRED: case ALLOW_TRUST_CANT_REVOKE: case ALLOW_TRUST_SELF_NOT_ALLOWED: case ALLOW_TRUST_LOW_RESERVE: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "no_trust_line",
        "trust_not_required",
        "cant_revoke",
        "self_not_allowed",
        "low_reserve"
      ]
    },
    "AlphaNum12": {
      "description": "AlphaNum12 is an XDR Struct defines as:\n\n```text struct AlphaNum12 { AssetCode12 assetCode; AccountID issuer; }; ```",
      "type": "object",
      "required": [
        "asset_code",
        "issuer"
      ],
      "properties": {
        "asset_code": {
          "$ref": "#/definitions/AssetCode12"
        },
        "issuer": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "AlphaNum4": {
      "description": "AlphaNum4 is an XDR Struct defines as:\n\n```text struct AlphaNum4 { AssetCode4 assetCode; AccountID issuer; }; ```",
      "type": "object",
      "required": [
        "asset_code",
        "issuer"
      ],
      "properties": {
        "asset_code": {
          "$ref": "#/definitions/AssetCode4"
        },
        "issuer": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "Asset": {
      "description": "Asset is an XDR Union defines as:\n\n```text union Asset switch (AssetType type) { case ASSET_TYPE_NATIVE: // Not credit void;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM4: AlphaNum4 alphaNum4;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM12: AlphaNum12 alphaNum12;\n\n// add other asset types here in the future }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "native"
          ]
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum4"
          ],
          "properties": {
            "credit_alphanum4": {
              "$ref": "#/definitions/AlphaNum4"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum12"
          ],
          "properties": {
            "credit_alphanum12": {
              "$ref": "#/definitions/AlphaNum12"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetCode12": {
      "type": "string"
    },
    "AssetCode4": {
      "type": "string"
    },
    "BeginSponsoringFutureReservesResult": {
      "description": "BeginSponsoringFutureReservesResult is an XDR Union defines as:\n\n```text union BeginSponsoringFutureReservesResult switch ( BeginSponsoringFutureReservesResultCode code) { case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS: void; case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED: case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED: case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "already_sponsored",
        "recursive"
      ]
    },
    "BumpSequenceResult": {
      "description": "BumpSequenceResult is an XDR Union defines as:\n\n```text union BumpSequenceResult switch (BumpSequenceResultCode code) { case BUMP_SEQUENCE_SUCCESS: void; case BUMP_SEQUENCE_BAD_SEQ: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "bad_seq"
      ]
    },
    "ChangeTrustResult": {
      "description": "ChangeTrustResult is an XDR Union defines as:\n\n```text union ChangeTrustResult switch (ChangeTrustResultCode code) { case CHANGE_TRUST_SUCCESS: void; case CHANGE_TRUST_MALFORMED: case CHANGE_TRUST_NO_ISSUER: case CHANGE_TRUST_INVALID_LIMIT: case CHANGE_TRUST_LOW_RESERVE: case CHANGE_TRUST_SELF_NOT_ALLOWED: case CHANGE_TRUST_TRUST_LINE_MISSING: case CHANGE_TRUST_CANNOT_DELETE: case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "no_issuer",
        "invalid_limit",
        "low_reserve",
        "self_not_allowed",
        "trust_line_missing",
        "cannot_delete",
        "not_auth_maintain_liabilities"
      ]
    },
    "ClaimAtom": {
      "description": "ClaimAtom is an XDR Union defines as:\n\n```text union ClaimAtom switch (ClaimAtomType type) { case CLAIM_ATOM_TYPE_V0: ClaimOfferAtomV0 v0; case CLAIM_ATOM_TYPE_ORDER_BOOK: ClaimOfferAtom orderBook; case CLAIM_ATOM_TYPE_LIQUIDITY_POOL: ClaimLiquidityAtom liquidityPool; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "v0"
          ],
          "properties": {
            "v0": {
              "$ref": "#/definitions/ClaimOfferAtomV0"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "order_book"
          ],
          "properties": {
            "order_book": {
              "$ref": "#/definitions/ClaimOfferAtom"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "liquidity_pool"
          ],
          "properties": {
            "liquidity_pool": {
              "$ref": "#/definitions/ClaimLiquidityAtom"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ClaimClaimableBalanceResult": {
      "description": "ClaimClaimableBalanceResult is an XDR Union defines as:\n\n```text union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code) { case CLAIM_CLAIMABLE_BALANCE_SUCCESS: void; case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST: case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM: case CLAIM_CLAIMABLE_BALANCE_LINE_FULL: case CLAIM_CLAIMABLE_BALANCE_NO_TRUST: case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "does_not_exist",
        "cannot_claim",
        "line_full",
        "no_trust",
        "not_authorized"
      ]
    },
    "ClaimLiquidityAtom": {
      "description": "ClaimLiquidityAtom is an XDR Struct defines as:\n\n```text struct ClaimLiquidityAtom { PoolID liquidityPoolID;\n\n// amount and asset taken from the pool Asset assetSold; int64 amountSold;\n\n// amount and asset sent to the pool Asset assetBought; int64 amountBought; }; ```",
      "type": "object",
      "required": [
        "amount_bought",
        "amount_sold",
        "asset_bought",
        "asset_sold",
        "liquidity_pool_id"
      ],
      "properties": {
        "amount_bought": {
          "type": "integer",
          "format": "int64"
        },
        "amount_sold": {
          "type": "integer",
          "format": "int64"
        },
        "asset_bought": {
          "$ref": "#/definitions/Asset"
        },
        "asset_sold": {
          "$ref": "#/definitions/Asset"
        },
        "liquidity_pool_id": {
          "$ref": "#/definitions/PoolId"
        }
      }
    },
    "ClaimOfferAtom": {
      "description": "ClaimOfferAtom is an XDR Struct defines as:\n\n```text struct ClaimOfferAtom { // emitted to identify the offer AccountID sellerID; // Account that owns the offer int64 offerID;\n\n// amount and asset taken from the owner Asset assetSold; int64 amountSold;\n\n// amount and asset sent to the owner Asset assetBought; int64 amountBought; }; ```",
      "type": "object",
      "required": [
        "amount_bought",
        "amount_sold",
        "asset_bought",
        "asset_sold",
        "offer_id",
        "seller_id"
      ],
      "properties": {
        "amount_bought": {
          "type": "integer",
          "format": "int64"
        },
        "amount_sold": {
          "type": "integer",
          "format": "int64"
        },
        "asset_bought": {
          "$ref": "#/definitions/Asset"
        },
        "asset_sold": {
          "$ref": "#/definitions/Asset"
        },
        "offer_id": {
          "type": "integer",
          "format": "int64"
        },
        "seller_id": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "ClaimOfferAtomV0": {
      "description": "ClaimOfferAtomV0 is an XDR Struct defines as:\n\n```text struct ClaimOfferAtomV0 { // emitted to identify the offer uint256 sellerEd25519; // Account that owns the offer int64 offerID;\n\n// amount and asset taken from the owner Asset assetSold; int64 amountSold;\n\n// amount and asset sent to the owner Asset assetBought; int64 amountBought; }; ```",
      "type": "object",
      "required": [
        "amount_bought",
        "amount_sold",
        "asset_bought",
        "asset_sold",
        "offer_id",
        "seller_ed25519"
      ],
      "properties": {
        "amount_bought": {
          "type": "integer",
          "format": "int64"
        },
        "amount_sold": {
          "type": "integer",
          "format": "int64"
        },
        "asset_bought": {
          "$ref": "#/definitions/Asset"
        },
        "asset_sold": {
          "$ref": "#/definitions/Asset"
        },
        "offer_id": {
          "type": "integer",
          "format": "int64"
        },
        "seller_ed25519": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      }
    },
    "ClaimableBalanceId": {
      "type": "string"
    },
    "ClawbackClaimableBalanceResult": {
      "description": "ClawbackClaimableBalanceResult is an XDR Union defines as:\n\n```text union ClawbackClaimableBalanceResult switch ( ClawbackClaimableBalanceResultCode code) { case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS: void; case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST: case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER: case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "does_not_exist",
        "not_issuer",
        "not_clawback_enabled"
      ]
    },
    "ClawbackResult": {
      "description": "ClawbackResult is an XDR Union defines as:\n\n```text union ClawbackResult switch (ClawbackResultCode code) { case CLAWBACK_SUCCESS: void; case CLAWBACK_MALFORMED: case CLAWBACK_NOT_CLAWBACK_ENABLED: case CLAWBACK_NO_TRUST: case CLAWBACK_UNDERFUNDED: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "not_clawback_enabled",
        "no_trust",
        "underfunded"
      ]
    },
    "CreateAccountResult": {
      "description": "CreateAccountResult is an XDR Union defines as:\n\n```text union CreateAccountResult switch (CreateAccountResultCode code) { case CREATE_ACCOUNT_SUCCESS: void; case CREATE_ACCOUNT_MALFORMED: case CREATE_ACCOUNT_UNDERFUNDED: case CREATE_ACCOUNT_LOW_RESERVE: case CREATE_ACCOUNT_ALREADY_EXIST: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "underfunded",
        "low_reserve",
        "already_exist"
      ]
    },
    "CreateClaimableBalanceResult": {
      "description": "CreateClaimableBalanceResult is an XDR Union defines as:\n\n```text union CreateClaimableBalanceResult switch ( CreateClaimableBalanceResultCode code) { case CREATE_CLAIMABLE_BALANCE_SUCCESS: ClaimableBalanceID balanceID; case CREATE_CLAIMABLE_BALANCE_MALFORMED: case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE: case CREATE_CLAIMABLE_BALANCE_NO_TRUST: case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED: case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "malformed",
            "low_reserve",
            "no_trust",
            "not_authorized",
            "underfunded"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "$ref": "#/definitions/ClaimableBalanceId"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "EndSponsoringFutureReservesResult": {
      "description": "EndSponsoringFutureReservesResult is an XDR Union defines as:\n\n```text union EndSponsoringFutureReservesResult switch ( EndSponsoringFutureReservesResultCode code) { case END_SPONSORING_FUTURE_RESERVES_SUCCESS: void; case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "not_sponsored"
      ]
    },
    "ExtendFootprintTtlResult": {
      "description": "ExtendFootprintTtlResult is an XDR Union defines as:\n\n```text union ExtendFootprintTTLResult switch (ExtendFootprintTTLResultCode code) { case EXTEND_FOOTPRINT_TTL_SUCCESS: void; case EXTEND_FOOTPRINT_TTL_MALFORMED: case EXTEND_FOOTPRINT_TTL_RESOURCE_LIMIT_EXCEEDED: case EXTEND_FOOTPRINT_TTL_INSUFFICIENT_REFUNDABLE_FEE: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "resource_limit_exceeded",
        "insufficient_refundable_fee"
      ]
    },
    "InflationPayout": {
      "description": "InflationPayout is an XDR Struct defines as:\n\n```text struct InflationPayout // or use PaymentResultAtom to limit types? { AccountID destination; int64 amount; }; ```",
      "type": "object",
      "required": [
        "amount",
        "destination"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "destination": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "InflationResult": {
      "description": "InflationResult is an XDR Union defines as:\n\n```text union InflationResult switch (InflationResultCode code) { case INFLATION_SUCCESS: InflationPayout payouts<>; case INFLATION_NOT_TIME: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "not_time"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InflationPayout"
              },
              "maxItems": 4294967295
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "InvokeHostFunctionResult": {
      "description": "InvokeHostFunctionResult is an XDR Union defines as:\n\n```text union InvokeHostFunctionResult switch (InvokeHostFunctionResultCode code) { case INVOKE_HOST_FUNCTION_SUCCESS: Hash success; // sha256(InvokeHostFunctionSuccessPreImage) case INVOKE_HOST_FUNCTION_MALFORMED: case INVOKE_HOST_FUNCTION_TRAPPED: case INVOKE_HOST_FUNCTION_RESOURCE_LIMIT_EXCEEDED: case INVOKE_HOST_FUNCTION_ENTRY_ARCHIVED: case INVOKE_HOST_FUNCTION_INSUFFICIENT_REFUNDABLE_FEE: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "malformed",
            "trapped",
            "resource_limit_exceeded",
            "entry_archived",
            "insufficient_refundable_fee"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "type": "string",
              "maxLength": 64,
              "minLength": 64,
              "contentEncoding": "hex",
              "contentMediaType": "application/binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LiquidityPoolDepositResult": {
      "description": "LiquidityPoolDepositResult is an XDR Union defines as:\n\n```text union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code) { case LIQUIDITY_POOL_DEPOSIT_SUCCESS: void; case LIQUIDITY_POOL_DEPOSIT_MALFORMED: case LIQUIDITY_POOL_DEPOSIT_NO_TRUST: case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED: case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED: case LIQUIDITY_POOL_DEPOSIT_LINE_FULL: case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE: case LIQUIDITY_POOL_DEPOSIT_POOL_FULL: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "no_trust",
        "not_authorized",
        "underfunded",
        "line_full",
        "bad_price",
        "pool_full"
      ]
    },
    "LiquidityPoolWithdrawResult": {
      "description": "LiquidityPoolWithdrawResult is an XDR Union defines as:\n\n```text union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code) { case LIQUIDITY_POOL_WITHDRAW_SUCCESS: void; case LIQUIDITY_POOL_WITHDRAW_MALFORMED: case LIQUIDITY_POOL_WITHDRAW_NO_TRUST: case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED: case LIQUIDITY_POOL_WITHDRAW_LINE_FULL: case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "no_trust",
        "underfunded",
        "line_full",
        "under_minimum"
      ]
    },
    "ManageBuyOfferResult": {
      "description": "ManageBuyOfferResult is an XDR Union defines as:\n\n```text union ManageBuyOfferResult switch (ManageBuyOfferResultCode code) { case MANAGE_BUY_OFFER_SUCCESS: ManageOfferSuccessResult success; case MANAGE_BUY_OFFER_MALFORMED: case MANAGE_BUY_OFFER_SELL_NO_TRUST: case MANAGE_BUY_OFFER_BUY_NO_TRUST: case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED: case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED: case MANAGE_BUY_OFFER_LINE_FULL: case MANAGE_BUY_OFFER_UNDERFUNDED: case MANAGE_BUY_OFFER_CROSS_SELF: case MANAGE_BUY_OFFER_SELL_NO_ISSUER: case MANAGE_BUY_OFFER_BUY_NO_ISSUER: case MANAGE_BUY_OFFER_NOT_FOUND: case MANAGE_BUY_OFFER_LOW_RESERVE: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "malformed",
            "sell_no_trust",
            "buy_no_trust",
            "sell_not_authorized",
            "buy_not_authorized",
            "line_full",
            "underfunded",
            "cross_self",
            "sell_no_issuer",
            "buy_no_issuer",
            "not_found",
            "low_reserve"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "$ref": "#/definitions/ManageOfferSuccessResult"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ManageDataResult": {
      "description": "ManageDataResult is an XDR Union defines as:\n\n```text union ManageDataResult switch (ManageDataResultCode code) { case MANAGE_DATA_SUCCESS: void; case MANAGE_DATA_NOT_SUPPORTED_YET: case MANAGE_DATA_NAME_NOT_FOUND: case MANAGE_DATA_LOW_RESERVE: case MANAGE_DATA_INVALID_NAME: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "not_supported_yet",
        "name_not_found",
        "low_reserve",
        "invalid_name"
      ]
    },
    "ManageOfferSuccessResult": {
      "description": "ManageOfferSuccessResult is an XDR Struct defines as:\n\n```text struct ManageOfferSuccessResult { // offers that got claimed while creating this offer ClaimAtom offersClaimed<>;\n\nunion switch (ManageOfferEffect effect) { case MANAGE_OFFER_CREATED: case MANAGE_OFFER_UPDATED: OfferEntry offer; case MANAGE_OFFER_DELETED: void; } offer; }; ```",
      "type": "object",
      "required": [
        "offer",
        "offers_claimed"
      ],
      "properties": {
        "offer": {
          "$ref": "#/definitions/ManageOfferSuccessResultOffer"
        },
        "offers_claimed": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClaimAtom"
          },
          "maxItems": 4294967295
        }
      }
    },
    "ManageOfferSuccessResultOffer": {
      "description": "ManageOfferSuccessResultOffer is an XDR NestedUnion defines as:\n\n```text union switch (ManageOfferEffect effect) { case MANAGE_OFFER_CREATED: case MANAGE_OFFER_UPDATED: OfferEntry offer; case MANAGE_OFFER_DELETED: void; } ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "deleted"
          ]
        },
        {
          "type": "object",
          "required": [
            "created"
          ],
          "properties": {
            "created": {
              "$ref": "#/definitions/OfferEntry"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "updated"
          ],
          "properties": {
            "updated": {
              "$ref": "#/definitions/OfferEntry"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ManageSellOfferResult": {
      "description": "ManageSellOfferResult is an XDR Union defines as:\n\n```text union ManageSellOfferResult switch (ManageSellOfferResultCode code) { case MANAGE_SELL_OFFER_SUCCESS: ManageOfferSuccessResult success; case MANAGE_SELL_OFFER_MALFORMED: case MANAGE_SELL_OFFER_SELL_NO_TRUST: case MANAGE_SELL_OFFER_BUY_NO_TRUST: case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED: case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED: case MANAGE_SELL_OFFER_LINE_FULL: case MANAGE_SELL_OFFER_UNDERFUNDED: case MANAGE_SELL_OFFER_CROSS_SELF: case MANAGE_SELL_OFFER_SELL_NO_ISSUER: case MANAGE_SELL_OFFER_BUY_NO_ISSUER: case MANAGE_SELL_OFFER_NOT_FOUND: case MANAGE_SELL_OFFER_LOW_RESERVE: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "malformed",
            "sell_no_trust",
            "buy_no_trust",
            "sell_not_authorized",
            "buy_not_authorized",
            "line_full",
            "underfunded",
            "cross_self",
            "sell_no_issuer",
            "buy_no_issuer",
            "not_found",
            "low_reserve"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "$ref": "#/definitions/ManageOfferSuccessResult"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OfferEntry": {
      "description": "OfferEntry is an XDR Struct defines as:\n\n```text struct OfferEntry { AccountID sellerID; int64 offerID; Asset selling; // A Asset buying;  // B int64 amount;  // amount of A\n\n/* price for this offer: price of A in terms of B price=AmountB/AmountA=priceNumerator/priceDenominator price is after fees */ Price price; uint32 flags; // see OfferEntryFlags\n\n// reserved for future use union switch (int v) { case 0: void; } ext; }; ```",
      "type": "object",
      "required": [
        "amount",
        "buying",
        "ext",
        "flags",
        "offer_id",
        "price",
        "seller_id",
        "selling"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "buying": {
          "$ref": "#/definitions/Asset"
        },
        "ext": {
          "$ref": "#/definitions/OfferEntryExt"
        },
        "flags": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "offer_id": {
          "type": "integer",
          "format": "int64"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "seller_id": {
          "$ref": "#/definitions/AccountId"
        },
        "selling": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "OfferEntryExt": {
      "description": "OfferEntryExt is an XDR NestedUnion defines as:\n\n```text union switch (int v) { case 0: void; } ```",
      "type": "string",
      "enum": [
        "v0"
      ]
    },
    "OperationResult": {
      "description": "OperationResult is an XDR Union defines as:\n\n```text union OperationResult switch (OperationResultCode code) { case opINNER: union switch (OperationType type) { case CREATE_ACCOUNT: CreateAccountResult createAccountResult; case PAYMENT: PaymentResult paymentResult; case PATH_PAYMENT_STRICT_RECEIVE: PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult; case MANAGE_SELL_OFFER: ManageSellOfferResult manageSellOfferResult; case CREATE_PASSIVE_SELL_OFFER: ManageSellOfferResult createPassiveSellOfferResult; case SET_OPTIONS: SetOptionsResult setOptionsResult; case CHANGE_TRUST: ChangeTrustResult changeTrustResult; case ALLOW_TRUST: AllowTrustResult allowTrustResult; case ACCOUNT_MERGE: AccountMergeResult accountMergeResult; case INFLATION: InflationResult inflationResult; case MANAGE_DATA: ManageDataResult manageDataResult; case BUMP_SEQUENCE: BumpSequenceResult bumpSeqResult; case MANAGE_BUY_OFFER: ManageBuyOfferResult manageBuyOfferResult; case PATH_PAYMENT_STRICT_SEND: PathPaymentStrictSendResult pathPaymentStrictSendResult; case CREATE_CLAIMABLE_BALANCE: CreateClaimableBalanceResult createClaimableBalanceResult; case CLAIM_CLAIMABLE_BALANCE: ClaimClaimableBalanceResult claimClaimableBalanceResult; case BEGIN_SPONSORING_FUTURE_RESERVES: BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult; case END_SPONSORING_FUTURE_RESERVES: EndSponsoringFutureReservesResult endSponsoringFutureReservesResult; case REVOKE_SPONSORSHIP: RevokeSponsorshipResult revokeSponsorshipResult; case CLAWBACK: ClawbackResult clawbackResult; case CLAWBACK_CLAIMABLE_BALANCE: ClawbackClaimableBalanceResult clawbackClaimableBalanceResult; case SET_TRUST_LINE_FLAGS: SetTrustLineFlagsResult setTrustLineFlagsResult; case LIQUIDITY_POOL_DEPOSIT: LiquidityPoolDepositResult liquidityPoolDepositResult; case LIQUIDITY_POOL_WITHDRAW: LiquidityPoolWithdrawResult liquidityPoolWithdrawResult; case INVOKE_HOST_FUNCTION: InvokeHostFunctionResult invokeHostFunctionResult; case EXTEND_FOOTPRINT_TTL: ExtendFootprintTTLResult extendFootprintTTLResult; case RESTORE_FOOTPRINT: RestoreFootprintResult restoreFootprintResult; } tr; case opBAD_AUTH: case opNO_ACCOUNT: case opNOT_SUPPORTED: case opTOO_MANY_SUBENTRIES: case opEXCEEDED_WORK_LIMIT: case opTOO_MANY_SPONSORING: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "op_bad_auth",
            "op_no_account",
            "op_not_supported",
            "op_too_many_subentries",
            "op_exceeded_work_limit",
            "op_too_many_sponsoring"
          ]
        },
        {
          "type": "object",
          "required": [
            "op_inner"
          ],
          "properties": {
            "op_inner": {
              "$ref": "#/definitions/OperationResultTr"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OperationResultTr": {
      "description": "OperationResultTr is an XDR NestedUnion defines as:\n\n```text union switch (OperationType type) { case CREATE_ACCOUNT: CreateAccountResult createAccountResult; case PAYMENT: PaymentResult paymentResult; case PATH_PAYMENT_STRICT_RECEIVE: PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult; case MANAGE_SELL_OFFER: ManageSellOfferResult manageSellOfferResult; case CREATE_PASSIVE_SELL_OFFER: ManageSellOfferResult createPassiveSellOfferResult; case SET_OPTIONS: SetOptionsResult setOptionsResult; case CHANGE_TRUST: ChangeTrustResult changeTrustResult; case ALLOW_TRUST: AllowTrustResult allowTrustResult; case ACCOUNT_MERGE: AccountMergeResult accountMergeResult; case INFLATION: InflationResult inflationResult; case MANAGE_DATA: ManageDataResult manageDataResult; case BUMP_SEQUENCE: BumpSequenceResult bumpSeqResult; case MANAGE_BUY_OFFER: ManageBuyOfferResult manageBuyOfferResult; case PATH_PAYMENT_STRICT_SEND: PathPaymentStrictSendResult pathPaymentStrictSendResult; case CREATE_CLAIMABLE_BALANCE: CreateClaimableBalanceResult createClaimableBalanceResult; case CLAIM_CLAIMABLE_BALANCE: ClaimClaimableBalanceResult claimClaimableBalanceResult; case BEGIN_SPONSORING_FUTURE_RESERVES: BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult; case END_SPONSORING_FUTURE_RESERVES: EndSponsoringFutureReservesResult endSponsoringFutureReservesResult; case REVOKE_SPONSORSHIP: RevokeSponsorshipResult revokeSponsorshipResult; case CLAWBACK: ClawbackResult clawbackResult; case CLAWBACK_CLAIMABLE_BALANCE: ClawbackClaimableBalanceResult clawbackClaimableBalanceResult; case SET_TRUST_LINE_FLAGS: SetTrustLineFlagsResult setTrustLineFlagsResult; case LIQUIDITY_POOL_DEPOSIT: LiquidityPoolDepositResult liquidityPoolDepositResult; case LIQUIDITY_POOL_WITHDRAW: LiquidityPoolWithdrawResult liquidityPoolWithdrawResult; case INVOKE_HOST_FUNCTION: InvokeHostFunctionResult invokeHostFunctionResult; case EXTEND_FOOTPRINT_TTL: ExtendFootprintTTLResult extendFootprintTTLResult; case RESTORE_FOOTPRINT: RestoreFootprintResult restoreFootprintResult; } ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "create_account"
          ],
          "properties": {
            "create_account": {
              "$ref": "#/definitions/CreateAccountResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "payment"
          ],
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "path_payment_strict_receive"
          ],
          "properties": {
            "path_payment_strict_receive": {
              "$ref": "#/definitions/PathPaymentStrictReceiveResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "manage_sell_offer"
          ],
          "properties": {
            "manage_sell_offer": {
              "$ref": "#/definitions/ManageSellOfferResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_passive_sell_offer"
          ],
          "properties": {
            "create_passive_sell_offer": {
              "$ref": "#/definitions/ManageSellOfferResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "set_options"
          ],
          "properties": {
            "set_options": {
              "$ref": "#/definitions/SetOptionsResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "change_trust"
          ],
          "properties": {
            "change_trust": {
              "$ref": "#/definitions/ChangeTrustResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "allow_trust"
          ],
          "properties": {
            "allow_trust": {
              "$ref": "#/definitions/AllowTrustResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "account_merge"
          ],
          "properties": {
            "account_merge": {
              "$ref": "#/definitions/AccountMergeResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "inflation"
          ],
          "properties": {
            "inflation": {
              "$ref": "#/definitions/InflationResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "manage_data"
          ],
          "properties": {
            "manage_data": {
              "$ref": "#/definitions/ManageDataResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "bump_sequence"
          ],
          "properties": {
            "bump_sequence": {
              "$ref": "#/definitions/BumpSequenceResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "manage_buy_offer"
          ],
          "properties": {
            "manage_buy_offer": {
              "$ref": "#/definitions/ManageBuyOfferResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "path_payment_strict_send"
          ],
          "properties": {
            "path_payment_strict_send": {
              "$ref": "#/definitions/PathPaymentStrictSendResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_claimable_balance"
          ],
          "properties": {
            "create_claimable_balance": {
              "$ref": "#/definitions/CreateClaimableBalanceResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "claim_claimable_balance"
          ],
          "properties": {
            "claim_claimable_balance": {
              "$ref": "#/definitions/ClaimClaimableBalanceResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "begin_sponsoring_future_reserves"
          ],
          "properties": {
            "begin_sponsoring_future_reserves": {
              "$ref": "#/definitions/BeginSponsoringFutureReservesResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "end_sponsoring_future_reserves"
          ],
          "properties": {
            "end_sponsoring_future_reserves": {
              "$ref": "#/definitions/EndSponsoringFutureReservesResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "revoke_sponsorship"
          ],
          "properties": {
            "revoke_sponsorship": {
              "$ref": "#/definitions/RevokeSponsorshipResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "clawback"
          ],
          "properties": {
            "clawback": {
              "$ref": "#/definitions/ClawbackResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "clawback_claimable_balance"
          ],
          "properties": {
            "clawback_claimable_balance": {
              "$ref": "#/definitions/ClawbackClaimableBalanceResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "set_trust_line_flags"
          ],
          "properties": {
            "set_trust_line_flags": {
              "$ref": "#/definitions/SetTrustLineFlagsResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "liquidity_pool_deposit"
          ],
          "properties": {
            "liquidity_pool_deposit": {
              "$ref": "#/definitions/LiquidityPoolDepositResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "liquidity_pool_withdraw"
          ],
          "properties": {
            "liquidity_pool_withdraw": {
              "$ref": "#/definitions/LiquidityPoolWithdrawResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "invoke_host_function"
          ],
          "properties": {
            "invoke_host_function": {
              "$ref": "#/definitions/InvokeHostFunctionResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "extend_footprint_ttl"
          ],
          "properties": {
            "extend_footprint_ttl": {
              "$ref": "#/definitions/ExtendFootprintTtlResult"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "restore_footprint"
          ],
          "properties": {
            "restore_footprint": {
              "$ref": "#/definitions/RestoreFootprintResult"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PathPaymentStrictReceiveResult": {
      "description": "PathPaymentStrictReceiveResult is an XDR Union defines as:\n\n```text union PathPaymentStrictReceiveResult switch ( PathPaymentStrictReceiveResultCode code) { case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS: struct { ClaimAtom offers<>; SimplePaymentResult last; } success; case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED: case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED: case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST: case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED: case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION: case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST: case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED: case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL: void; case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER: Asset noIssuer; // the asset that caused the error case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS: case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF: case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "malformed",
            "underfunded",
            "src_no_trust",
            "src_not_authorized",
            "no_destination",
            "no_trust",
            "not_authorized",
            "line_full",
            "too_few_offers",
            "offer_cross_self",
            "over_sendmax"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "$ref": "#/definitions/PathPaymentStrictReceiveResultSuccess"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "no_issuer"
          ],
          "properties": {
            "no_issuer": {
              "$ref": "#/definitions/Asset"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PathPaymentStrictReceiveResultSuccess": {
      "description": "PathPaymentStrictReceiveResultSuccess is an XDR NestedStruct defines as:\n\n```text struct { ClaimAtom offers<>; SimplePaymentResult last; } ```",
      "type": "object",
      "required": [
        "last",
        "offers"
      ],
      "properties": {
        "last": {
          "$ref": "#/definitions/SimplePaymentResult"
        },
        "offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClaimAtom"
          },
          "maxItems": 4294967295
        }
      }
    },
    "PathPaymentStrictSendResult": {
      "description": "PathPaymentStrictSendResult is an XDR Union defines as:\n\n```text union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code) { case PATH_PAYMENT_STRICT_SEND_SUCCESS: struct { ClaimAtom offers<>; SimplePaymentResult last; } success; case PATH_PAYMENT_STRICT_SEND_MALFORMED: case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED: case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST: case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED: case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION: case PATH_PAYMENT_STRICT_SEND_NO_TRUST: case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED: case PATH_PAYMENT_STRICT_SEND_LINE_FULL: void; case PATH_PAYMENT_STRICT_SEND_NO_ISSUER: Asset noIssuer; // the asset that caused the error case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS: case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF: case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "malformed",
            "underfunded",
            "src_no_trust",
            "src_not_authorized",
            "no_destination",
            "no_trust",
            "not_authorized",
            "line_full",
            "too_few_offers",
            "offer_cross_self",
            "under_destmin"
          ]
        },
        {
          "type": "object",
          "required": [
            "success"
          ],
          "properties": {
            "success": {
              "$ref": "#/definitions/PathPaymentStrictSendResultSuccess"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "no_issuer"
          ],
          "properties": {
            "no_issuer": {
              "$ref": "#/definitions/Asset"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PathPaymentStrictSendResultSuccess": {
      "description": "PathPaymentStrictSendResultSuccess is an XDR NestedStruct defines as:\n\n```text struct { ClaimAtom offers<>; SimplePaymentResult last; } ```",
      "type": "object",
      "required": [
        "last",
        "offers"
      ],
      "properties": {
        "last": {
          "$ref": "#/definitions/SimplePaymentResult"
        },
        "offers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClaimAtom"
          },
          "maxItems": 4294967295
        }
      }
    },
    "PaymentResult": {
      "description": "PaymentResult is an XDR Union defines as:\n\n```text union PaymentResult switch (PaymentResultCode code) { case PAYMENT_SUCCESS: void; case PAYMENT_MALFORMED: case PAYMENT_UNDERFUNDED: case PAYMENT_SRC_NO_TRUST: case PAYMENT_SRC_NOT_AUTHORIZED: case PAYMENT_NO_DESTINATION: case PAYMENT_NO_TRUST: case PAYMENT_NOT_AUTHORIZED: case PAYMENT_LINE_FULL: case PAYMENT_NO_ISSUER: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "underfunded",
        "src_no_trust",
        "src_not_authorized",
        "no_destination",
        "no_trust",
        "not_authorized",
        "line_full",
        "no_issuer"
      ]
    },
    "PoolId": {
      "type": "string"
    },
    "Price": {
      "description": "Price is an XDR Struct defines as:\n\n```text struct Price { int32 n; // numerator int32 d; // denominator }; ```",
      "type": "object",
      "required": [
        "d",
        "n"
      ],
      "properties": {
        "d": {
          "type": "integer",
          "format": "int32"
        },
        "n": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RestoreFootprintResult": {
      "description": "RestoreFootprintResult is an XDR Union defines as:\n\n```text union RestoreFootprintResult switch (RestoreFootprintResultCode code) { case RESTORE_FOOTPRINT_SUCCESS: void; case RESTORE_FOOTPRINT_MALFORMED: case RESTORE_FOOTPRINT_RESOURCE_LIMIT_EXCEEDED: case RESTORE_FOOTPRINT_INSUFFICIENT_REFUNDABLE_FEE: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "resource_limit_exceeded",
        "insufficient_refundable_fee"
      ]
    },
    "RevokeSponsorshipResult": {
      "description": "RevokeSponsorshipResult is an XDR Union defines as:\n\n```text union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code) { case REVOKE_SPONSORSHIP_SUCCESS: void; case REVOKE_SPONSORSHIP_DOES_NOT_EXIST: case REVOKE_SPONSORSHIP_NOT_SPONSOR: case REVOKE_SPONSORSHIP_LOW_RESERVE: case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE: case REVOKE_SPONSORSHIP_MALFORMED: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "does_not_exist",
        "not_sponsor",
        "low_reserve",
        "only_transferable",
        "malformed"
      ]
    },
    "SetOptionsResult": {
      "description": "SetOptionsResult is an XDR Union defines as:\n\n```text union SetOptionsResult switch (SetOptionsResultCode code) { case SET_OPTIONS_SUCCESS: void; case SET_OPTIONS_LOW_RESERVE: case SET_OPTIONS_TOO_MANY_SIGNERS: case SET_OPTIONS_BAD_FLAGS: case SET_OPTIONS_INVALID_INFLATION: case SET_OPTIONS_CANT_CHANGE: case SET_OPTIONS_UNKNOWN_FLAG: case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE: case SET_OPTIONS_BAD_SIGNER: case SET_OPTIONS_INVALID_HOME_DOMAIN: case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "low_reserve",
        "too_many_signers",
        "bad_flags",
        "invalid_inflation",
        "cant_change",
        "unknown_flag",
        "threshold_out_of_range",
        "bad_signer",
        "invalid_home_domain",
        "auth_revocable_required"
      ]
    },
    "SetTrustLineFlagsResult": {
      "description": "SetTrustLineFlagsResult is an XDR Union defines as:\n\n```text union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code) { case SET_TRUST_LINE_FLAGS_SUCCESS: void; case SET_TRUST_LINE_FLAGS_MALFORMED: case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE: case SET_TRUST_LINE_FLAGS_CANT_REVOKE: case SET_TRUST_LINE_FLAGS_INVALID_STATE: case SET_TRUST_LINE_FLAGS_LOW_RESERVE: void; }; ```",
      "type": "string",
      "enum": [
        "success",
        "malformed",
        "no_trust_line",
        "cant_revoke",
        "invalid_state",
        "low_reserve"
      ]
    },
    "SimplePaymentResult": {
      "description": "SimplePaymentResult is an XDR Struct defines as:\n\n```text struct SimplePaymentResult { AccountID destination; Asset asset; int64 amount; }; ```",
      "type": "object",
      "required": [
        "amount",
        "asset",
        "destination"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "asset": {
          "$ref": "#/definitions/Asset"
        },
        "destination": {
          "$ref": "#/definitions/AccountId"
        }
      }
    }
  }
}