{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "ContractCostType",
  "description": "ContractCostType is an XDR Enum defines as:\n\n```text enum ContractCostType { // Cost of running 1 wasm instruction WasmInsnExec = 0, // Cost of allocating a slice of memory (in bytes) MemAlloc = 1, // Cost of copying a slice of bytes into a pre-allocated memory MemCpy = 2, // Cost of comparing two slices of memory MemCmp = 3, // Cost of a host function dispatch, not including the actual work done by // the function nor the cost of VM invocation machinary DispatchHostFunction = 4, // Cost of visiting a host object from the host object storage. Exists to // make sure some baseline cost coverage, i.e. repeatly visiting objects // by the guest will always incur some charges. VisitObject = 5, // Cost of serializing an xdr object to bytes ValSer = 6, // Cost of deserializing an xdr object from bytes ValDeser = 7, // Cost of computing the sha256 hash from bytes ComputeSha256Hash = 8, // Cost of computing the ed25519 pubkey from bytes ComputeEd25519PubKey = 9, // Cost of verifying ed25519 signature of a payload. VerifyEd25519Sig = 10, // Cost of instantiation a VM from wasm bytes code. VmInstantiation = 11, // Cost of instantiation a VM from a cached state. VmCachedInstantiation = 12, // Cost of invoking a function on the VM. If the function is a host function, // additional cost will be covered by `DispatchHostFunction`. InvokeVmFunction = 13, // Cost of computing a keccak256 hash from bytes. ComputeKeccak256Hash = 14, // Cost of decoding an ECDSA signature computed from a 256-bit prime modulus // curve (e.g. secp256k1 and secp256r1) DecodeEcdsaCurve256Sig = 15, // Cost of recovering an ECDSA secp256k1 key from a signature. RecoverEcdsaSecp256k1Key = 16, // Cost of int256 addition (`+`) and subtraction (`-`) operations Int256AddSub = 17, // Cost of int256 multiplication (`*`) operation Int256Mul = 18, // Cost of int256 division (`/`) operation Int256Div = 19, // Cost of int256 power (`exp`) operation Int256Pow = 20, // Cost of int256 shift (`shl`, `shr`) operation Int256Shift = 21, // Cost of drawing random bytes using a ChaCha20 PRNG ChaCha20DrawBytes = 22,\n\n// Cost of parsing wasm bytes that only encode instructions. ParseWasmInstructions = 23, // Cost of parsing a known number of wasm functions. ParseWasmFunctions = 24, // Cost of parsing a known number of wasm globals. ParseWasmGlobals = 25, // Cost of parsing a known number of wasm table entries. ParseWasmTableEntries = 26, // Cost of parsing a known number of wasm types. ParseWasmTypes = 27, // Cost of parsing a known number of wasm data segments. ParseWasmDataSegments = 28, // Cost of parsing a known number of wasm element segments. ParseWasmElemSegments = 29, // Cost of parsing a known number of wasm imports. ParseWasmImports = 30, // Cost of parsing a known number of wasm exports. ParseWasmExports = 31, // Cost of parsing a known number of data segment bytes. ParseWasmDataSegmentBytes = 32,\n\n// Cost of instantiating wasm bytes that only encode instructions. InstantiateWasmInstructions = 33, // Cost of instantiating a known number of wasm functions. InstantiateWasmFunctions = 34, // Cost of instantiating a known number of wasm globals. InstantiateWasmGlobals = 35, // Cost of instantiating a known number of wasm table entries. InstantiateWasmTableEntries = 36, // Cost of instantiating a known number of wasm types. InstantiateWasmTypes = 37, // Cost of instantiating a known number of wasm data segments. InstantiateWasmDataSegments = 38, // Cost of instantiating a known number of wasm element segments. InstantiateWasmElemSegments = 39, // Cost of instantiating a known number of wasm imports. InstantiateWasmImports = 40, // Cost of instantiating a known number of wasm exports. InstantiateWasmExports = 41, // Cost of instantiating a known number of data segment bytes. InstantiateWasmDataSegmentBytes = 42,\n\n// Cost of decoding a bytes array representing an uncompressed SEC-1 encoded // point on a 256-bit elliptic curve Sec1DecodePointUncompressed = 43, // Cost of verifying an ECDSA Secp256r1 signature VerifyEcdsaSecp256r1Sig = 44,\n\n// Cost of encoding a BLS12-381 Fp (base field element) Bls12381EncodeFp = 45, // Cost of decoding a BLS12-381 Fp (base field element) Bls12381DecodeFp = 46, // Cost of checking a G1 point lies on the curve Bls12381G1CheckPointOnCurve = 47, // Cost of checking a G1 point belongs to the correct subgroup Bls12381G1CheckPointInSubgroup = 48, // Cost of checking a G2 point lies on the curve Bls12381G2CheckPointOnCurve = 49, // Cost of checking a G2 point belongs to the correct subgroup Bls12381G2CheckPointInSubgroup = 50, // Cost of converting a BLS12-381 G1 point from projective to affine coordinates Bls12381G1ProjectiveToAffine = 51, // Cost of converting a BLS12-381 G2 point from projective to affine coordinates Bls12381G2ProjectiveToAffine = 52, // Cost of performing BLS12-381 G1 point addition Bls12381G1Add = 53, // Cost of performing BLS12-381 G1 scalar multiplication Bls12381G1Mul = 54, // Cost of performing BLS12-381 G1 multi-scalar multiplication (MSM) Bls12381G1Msm = 55, // Cost of mapping a BLS12-381 Fp field element to a G1 point Bls12381MapFpToG1 = 56, // Cost of hashing to a BLS12-381 G1 point Bls12381HashToG1 = 57, // Cost of performing BLS12-381 G2 point addition Bls12381G2Add = 58, // Cost of performing BLS12-381 G2 scalar multiplication Bls12381G2Mul = 59, // Cost of performing BLS12-381 G2 multi-scalar multiplication (MSM) Bls12381G2Msm = 60, // Cost of mapping a BLS12-381 Fp2 field element to a G2 point Bls12381MapFp2ToG2 = 61, // Cost of hashing to a BLS12-381 G2 point Bls12381HashToG2 = 62, // Cost of performing BLS12-381 pairing operation Bls12381Pairing = 63, // Cost of converting a BLS12-381 scalar element from U256 Bls12381FrFromU256 = 64, // Cost of converting a BLS12-381 scalar element to U256 Bls12381FrToU256 = 65, // Cost of performing BLS12-381 scalar element addition/subtraction Bls12381FrAddSub = 66, // Cost of performing BLS12-381 scalar element multiplication Bls12381FrMul = 67, // Cost of performing BLS12-381 scalar element exponentiation Bls12381FrPow = 68, // Cost of performing BLS12-381 scalar element inversion Bls12381FrInv = 69 }; ```",
  "type": "string",
  "enum": [
    "wasm_insn_exec",
    "mem_alloc",
    "mem_cpy",
    "mem_cmp",
    "dispatch_host_function",
    "visit_object",
    "val_ser",
    "val_deser",
    "compute_sha256_hash",
    "compute_ed25519_pub_key",
    "verify_ed25519_sig",
    "vm_instantiation",
    "vm_cached_instantiation",
    "invoke_vm_function",
    "compute_keccak256_hash",
    "decode_ecdsa_curve256_sig",
    "recover_ecdsa_secp256k1_key",
    "int256_add_sub",
    "int256_mul",
    "int256_div",
    "int256_pow",
    "int256_shift",
    "cha_cha20_draw_bytes",
    "parse_wasm_instructions",
    "parse_wasm_functions",
    "parse_wasm_globals",
    "parse_wasm_table_entries",
    "parse_wasm_types",
    "parse_wasm_data_segments",
    "parse_wasm_elem_segments",
    "parse_wasm_imports",
    "parse_wasm_exports",
    "parse_wasm_data_segment_bytes",
    "instantiate_wasm_instructions",
    "instantiate_wasm_functions",
    "instantiate_wasm_globals",
    "instantiate_wasm_table_entries",
    "instantiate_wasm_types",
    "instantiate_wasm_data_segments",
    "instantiate_wasm_elem_segments",
    "instantiate_wasm_imports",
    "instantiate_wasm_exports",
    "instantiate_wasm_data_segment_bytes",
    "sec1_decode_point_uncompressed",
    "verify_ecdsa_secp256r1_sig",
    "bls12381_encode_fp",
    "bls12381_decode_fp",
    "bls12381_g1_check_point_on_curve",
    "bls12381_g1_check_point_in_subgroup",
    "bls12381_g2_check_point_on_curve",
    "bls12381_g2_check_point_in_subgroup",
    "bls12381_g1_projective_to_affine",
    "bls12381_g2_projective_to_affine",
    "bls12381_g1_add",
    "bls12381_g1_mul",
    "bls12381_g1_msm",
    "bls12381_map_fp_to_g1",
    "bls12381_hash_to_g1",
    "bls12381_g2_add",
    "bls12381_g2_mul",
    "bls12381_g2_msm",
    "bls12381_map_fp2_to_g2",
    "bls12381_hash_to_g2",
    "bls12381_pairing",
    "bls12381_fr_from_u256",
    "bls12381_fr_to_u256",
    "bls12381_fr_add_sub",
    "bls12381_fr_mul",
    "bls12381_fr_pow",
    "bls12381_fr_inv"
  ]
}