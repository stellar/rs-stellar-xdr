{
  "$schema": "https://json-schema.org/draft/2019-09/schema",
  "title": "StellarMessage",
  "description": "StellarMessage is an XDR Union defines as:\n\n```text union StellarMessage switch (MessageType type) { case ERROR_MSG: Error error; case HELLO: Hello hello; case AUTH: Auth auth; case DONT_HAVE: DontHave dontHave; case PEERS: PeerAddress peers<100>;\n\ncase GET_TX_SET: uint256 txSetHash; case TX_SET: TransactionSet txSet; case GENERALIZED_TX_SET: GeneralizedTransactionSet generalizedTxSet;\n\ncase TRANSACTION: TransactionEnvelope transaction;\n\ncase SURVEY_REQUEST: SignedSurveyRequestMessage signedSurveyRequestMessage;\n\ncase SURVEY_RESPONSE: SignedSurveyResponseMessage signedSurveyResponseMessage;\n\ncase TIME_SLICED_SURVEY_REQUEST: SignedTimeSlicedSurveyRequestMessage signedTimeSlicedSurveyRequestMessage;\n\ncase TIME_SLICED_SURVEY_RESPONSE: SignedTimeSlicedSurveyResponseMessage signedTimeSlicedSurveyResponseMessage;\n\ncase TIME_SLICED_SURVEY_START_COLLECTING: SignedTimeSlicedSurveyStartCollectingMessage signedTimeSlicedSurveyStartCollectingMessage;\n\ncase TIME_SLICED_SURVEY_STOP_COLLECTING: SignedTimeSlicedSurveyStopCollectingMessage signedTimeSlicedSurveyStopCollectingMessage;\n\n// SCP case GET_SCP_QUORUMSET: uint256 qSetHash; case SCP_QUORUMSET: SCPQuorumSet qSet; case SCP_MESSAGE: SCPEnvelope envelope; case GET_SCP_STATE: uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest case SEND_MORE: SendMore sendMoreMessage; case SEND_MORE_EXTENDED: SendMoreExtended sendMoreExtendedMessage; // Pull mode case FLOOD_ADVERT: FloodAdvert floodAdvert; case FLOOD_DEMAND: FloodDemand floodDemand; }; ```",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "error_msg"
      ],
      "properties": {
        "error_msg": {
          "$ref": "#/definitions/SError"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "hello"
      ],
      "properties": {
        "hello": {
          "$ref": "#/definitions/Hello"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/Auth"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "dont_have"
      ],
      "properties": {
        "dont_have": {
          "$ref": "#/definitions/DontHave"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "peers"
      ],
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PeerAddress"
          },
          "maxItems": 100
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_tx_set"
      ],
      "properties": {
        "get_tx_set": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "tx_set"
      ],
      "properties": {
        "tx_set": {
          "$ref": "#/definitions/TransactionSet"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "generalized_tx_set"
      ],
      "properties": {
        "generalized_tx_set": {
          "$ref": "#/definitions/GeneralizedTransactionSet"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transaction"
      ],
      "properties": {
        "transaction": {
          "$ref": "#/definitions/TransactionEnvelope"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "survey_request"
      ],
      "properties": {
        "survey_request": {
          "$ref": "#/definitions/SignedSurveyRequestMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "survey_response"
      ],
      "properties": {
        "survey_response": {
          "$ref": "#/definitions/SignedSurveyResponseMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "time_sliced_survey_request"
      ],
      "properties": {
        "time_sliced_survey_request": {
          "$ref": "#/definitions/SignedTimeSlicedSurveyRequestMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "time_sliced_survey_response"
      ],
      "properties": {
        "time_sliced_survey_response": {
          "$ref": "#/definitions/SignedTimeSlicedSurveyResponseMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "time_sliced_survey_start_collecting"
      ],
      "properties": {
        "time_sliced_survey_start_collecting": {
          "$ref": "#/definitions/SignedTimeSlicedSurveyStartCollectingMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "time_sliced_survey_stop_collecting"
      ],
      "properties": {
        "time_sliced_survey_stop_collecting": {
          "$ref": "#/definitions/SignedTimeSlicedSurveyStopCollectingMessage"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_scp_quorumset"
      ],
      "properties": {
        "get_scp_quorumset": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "scp_quorumset"
      ],
      "properties": {
        "scp_quorumset": {
          "$ref": "#/definitions/ScpQuorumSet"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "scp_message"
      ],
      "properties": {
        "scp_message": {
          "$ref": "#/definitions/ScpEnvelope"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_scp_state"
      ],
      "properties": {
        "get_scp_state": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "send_more"
      ],
      "properties": {
        "send_more": {
          "$ref": "#/definitions/SendMore"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "send_more_extended"
      ],
      "properties": {
        "send_more_extended": {
          "$ref": "#/definitions/SendMoreExtended"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "flood_advert"
      ],
      "properties": {
        "flood_advert": {
          "$ref": "#/definitions/FloodAdvert"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "flood_demand"
      ],
      "properties": {
        "flood_demand": {
          "$ref": "#/definitions/FloodDemand"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "AccountId": {
      "type": "string"
    },
    "AllowTrustOp": {
      "description": "AllowTrustOp is an XDR Struct defines as:\n\n```text struct AllowTrustOp { AccountID trustor; AssetCode asset;\n\n// One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG uint32 authorize; }; ```",
      "type": "object",
      "required": [
        "asset",
        "authorize",
        "trustor"
      ],
      "properties": {
        "asset": {
          "$ref": "#/definitions/AssetCode"
        },
        "authorize": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trustor": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "AlphaNum12": {
      "description": "AlphaNum12 is an XDR Struct defines as:\n\n```text struct AlphaNum12 { AssetCode12 assetCode; AccountID issuer; }; ```",
      "type": "object",
      "required": [
        "asset_code",
        "issuer"
      ],
      "properties": {
        "asset_code": {
          "$ref": "#/definitions/AssetCode12"
        },
        "issuer": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "AlphaNum4": {
      "description": "AlphaNum4 is an XDR Struct defines as:\n\n```text struct AlphaNum4 { AssetCode4 assetCode; AccountID issuer; }; ```",
      "type": "object",
      "required": [
        "asset_code",
        "issuer"
      ],
      "properties": {
        "asset_code": {
          "$ref": "#/definitions/AssetCode4"
        },
        "issuer": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "Asset": {
      "description": "Asset is an XDR Union defines as:\n\n```text union Asset switch (AssetType type) { case ASSET_TYPE_NATIVE: // Not credit void;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM4: AlphaNum4 alphaNum4;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM12: AlphaNum12 alphaNum12;\n\n// add other asset types here in the future }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "native"
          ]
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum4"
          ],
          "properties": {
            "credit_alphanum4": {
              "$ref": "#/definitions/AlphaNum4"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum12"
          ],
          "properties": {
            "credit_alphanum12": {
              "$ref": "#/definitions/AlphaNum12"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AssetCode": {
      "type": "string"
    },
    "AssetCode12": {
      "type": "string"
    },
    "AssetCode4": {
      "type": "string"
    },
    "Auth": {
      "description": "Auth is an XDR Struct defines as:\n\n```text struct Auth { int flags; }; ```",
      "type": "object",
      "required": [
        "flags"
      ],
      "properties": {
        "flags": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "AuthCert": {
      "description": "AuthCert is an XDR Struct defines as:\n\n```text struct AuthCert { Curve25519Public pubkey; uint64 expiration; Signature sig; }; ```",
      "type": "object",
      "required": [
        "expiration",
        "pubkey",
        "sig"
      ],
      "properties": {
        "expiration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "pubkey": {
          "$ref": "#/definitions/Curve25519Public"
        },
        "sig": {
          "$ref": "#/definitions/Signature"
        }
      }
    },
    "BeginSponsoringFutureReservesOp": {
      "description": "BeginSponsoringFutureReservesOp is an XDR Struct defines as:\n\n```text struct BeginSponsoringFutureReservesOp { AccountID sponsoredID; }; ```",
      "type": "object",
      "required": [
        "sponsored_id"
      ],
      "properties": {
        "sponsored_id": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "BumpSequenceOp": {
      "description": "BumpSequenceOp is an XDR Struct defines as:\n\n```text struct BumpSequenceOp { SequenceNumber bumpTo; }; ```",
      "type": "object",
      "required": [
        "bump_to"
      ],
      "properties": {
        "bump_to": {
          "$ref": "#/definitions/SequenceNumber"
        }
      }
    },
    "ChangeTrustAsset": {
      "description": "ChangeTrustAsset is an XDR Union defines as:\n\n```text union ChangeTrustAsset switch (AssetType type) { case ASSET_TYPE_NATIVE: // Not credit void;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM4: AlphaNum4 alphaNum4;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM12: AlphaNum12 alphaNum12;\n\ncase ASSET_TYPE_POOL_SHARE: LiquidityPoolParameters liquidityPool;\n\n// add other asset types here in the future }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "native"
          ]
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum4"
          ],
          "properties": {
            "credit_alphanum4": {
              "$ref": "#/definitions/AlphaNum4"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum12"
          ],
          "properties": {
            "credit_alphanum12": {
              "$ref": "#/definitions/AlphaNum12"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "pool_share"
          ],
          "properties": {
            "pool_share": {
              "$ref": "#/definitions/LiquidityPoolParameters"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ChangeTrustOp": {
      "description": "ChangeTrustOp is an XDR Struct defines as:\n\n```text struct ChangeTrustOp { ChangeTrustAsset line;\n\n// if limit is set to 0, deletes the trust line int64 limit; }; ```",
      "type": "object",
      "required": [
        "limit",
        "line"
      ],
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int64"
        },
        "line": {
          "$ref": "#/definitions/ChangeTrustAsset"
        }
      }
    },
    "ClaimClaimableBalanceOp": {
      "description": "ClaimClaimableBalanceOp is an XDR Struct defines as:\n\n```text struct ClaimClaimableBalanceOp { ClaimableBalanceID balanceID; }; ```",
      "type": "object",
      "required": [
        "balance_id"
      ],
      "properties": {
        "balance_id": {
          "$ref": "#/definitions/ClaimableBalanceId"
        }
      }
    },
    "ClaimPredicate": {
      "description": "ClaimPredicate is an XDR Union defines as:\n\n```text union ClaimPredicate switch (ClaimPredicateType type) { case CLAIM_PREDICATE_UNCONDITIONAL: void; case CLAIM_PREDICATE_AND: ClaimPredicate andPredicates<2>; case CLAIM_PREDICATE_OR: ClaimPredicate orPredicates<2>; case CLAIM_PREDICATE_NOT: ClaimPredicate* notPredicate; case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME: int64 absBefore; // Predicate will be true if closeTime < absBefore case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME: int64 relBefore; // Seconds since closeTime of the ledger in which the // ClaimableBalanceEntry was created }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "unconditional"
          ]
        },
        {
          "type": "object",
          "required": [
            "and"
          ],
          "properties": {
            "and": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimPredicate"
              },
              "maxItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "or"
          ],
          "properties": {
            "or": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimPredicate"
              },
              "maxItems": 2
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "not"
          ],
          "properties": {
            "not": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ClaimPredicate"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "before_absolute_time"
          ],
          "properties": {
            "before_absolute_time": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "before_relative_time"
          ],
          "properties": {
            "before_relative_time": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ClaimableBalanceId": {
      "type": "string"
    },
    "Claimant": {
      "description": "Claimant is an XDR Union defines as:\n\n```text union Claimant switch (ClaimantType type) { case CLAIMANT_TYPE_V0: struct { AccountID destination;    // The account that can use this condition ClaimPredicate predicate; // Claimable if predicate is true } v0; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "claimant_type_v0"
          ],
          "properties": {
            "claimant_type_v0": {
              "$ref": "#/definitions/ClaimantV0"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ClaimantV0": {
      "description": "ClaimantV0 is an XDR NestedStruct defines as:\n\n```text struct { AccountID destination;    // The account that can use this condition ClaimPredicate predicate; // Claimable if predicate is true } ```",
      "type": "object",
      "required": [
        "destination",
        "predicate"
      ],
      "properties": {
        "destination": {
          "$ref": "#/definitions/AccountId"
        },
        "predicate": {
          "$ref": "#/definitions/ClaimPredicate"
        }
      }
    },
    "ClawbackClaimableBalanceOp": {
      "description": "ClawbackClaimableBalanceOp is an XDR Struct defines as:\n\n```text struct ClawbackClaimableBalanceOp { ClaimableBalanceID balanceID; }; ```",
      "type": "object",
      "required": [
        "balance_id"
      ],
      "properties": {
        "balance_id": {
          "$ref": "#/definitions/ClaimableBalanceId"
        }
      }
    },
    "ClawbackOp": {
      "description": "ClawbackOp is an XDR Struct defines as:\n\n```text struct ClawbackOp { Asset asset; MuxedAccount from; int64 amount; }; ```",
      "type": "object",
      "required": [
        "amount",
        "asset",
        "from"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "asset": {
          "$ref": "#/definitions/Asset"
        },
        "from": {
          "$ref": "#/definitions/MuxedAccount"
        }
      }
    },
    "ConfigSettingId": {
      "description": "ConfigSettingId is an XDR Enum defines as:\n\n```text enum ConfigSettingID { CONFIG_SETTING_CONTRACT_MAX_SIZE_BYTES = 0, CONFIG_SETTING_CONTRACT_COMPUTE_V0 = 1, CONFIG_SETTING_CONTRACT_LEDGER_COST_V0 = 2, CONFIG_SETTING_CONTRACT_HISTORICAL_DATA_V0 = 3, CONFIG_SETTING_CONTRACT_EVENTS_V0 = 4, CONFIG_SETTING_CONTRACT_BANDWIDTH_V0 = 5, CONFIG_SETTING_CONTRACT_COST_PARAMS_CPU_INSTRUCTIONS = 6, CONFIG_SETTING_CONTRACT_COST_PARAMS_MEMORY_BYTES = 7, CONFIG_SETTING_CONTRACT_DATA_KEY_SIZE_BYTES = 8, CONFIG_SETTING_CONTRACT_DATA_ENTRY_SIZE_BYTES = 9, CONFIG_SETTING_STATE_ARCHIVAL = 10, CONFIG_SETTING_CONTRACT_EXECUTION_LANES = 11, CONFIG_SETTING_BUCKETLIST_SIZE_WINDOW = 12, CONFIG_SETTING_EVICTION_ITERATOR = 13, CONFIG_SETTING_CONTRACT_PARALLEL_COMPUTE_V0 = 14, CONFIG_SETTING_CONTRACT_LEDGER_COST_EXT_V0 = 15 }; ```",
      "type": "string",
      "enum": [
        "contract_max_size_bytes",
        "contract_compute_v0",
        "contract_ledger_cost_v0",
        "contract_historical_data_v0",
        "contract_events_v0",
        "contract_bandwidth_v0",
        "contract_cost_params_cpu_instructions",
        "contract_cost_params_memory_bytes",
        "contract_data_key_size_bytes",
        "contract_data_entry_size_bytes",
        "state_archival",
        "contract_execution_lanes",
        "bucketlist_size_window",
        "eviction_iterator",
        "contract_parallel_compute_v0",
        "contract_ledger_cost_ext_v0"
      ]
    },
    "ContractDataDurability": {
      "description": "ContractDataDurability is an XDR Enum defines as:\n\n```text enum ContractDataDurability { TEMPORARY = 0, PERSISTENT = 1 }; ```",
      "type": "string",
      "enum": [
        "temporary",
        "persistent"
      ]
    },
    "ContractExecutable": {
      "description": "ContractExecutable is an XDR Union defines as:\n\n```text union ContractExecutable switch (ContractExecutableType type) { case CONTRACT_EXECUTABLE_WASM: Hash wasm_hash; case CONTRACT_EXECUTABLE_STELLAR_ASSET: void; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "stellar_asset"
          ]
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "type": "string",
              "maxLength": 64,
              "minLength": 64,
              "contentEncoding": "hex",
              "contentMediaType": "application/binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ContractIdPreimage": {
      "description": "ContractIdPreimage is an XDR Union defines as:\n\n```text union ContractIDPreimage switch (ContractIDPreimageType type) { case CONTRACT_ID_PREIMAGE_FROM_ADDRESS: struct { SCAddress address; uint256 salt; } fromAddress; case CONTRACT_ID_PREIMAGE_FROM_ASSET: Asset fromAsset; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/ContractIdPreimageFromAddress"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/Asset"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ContractIdPreimageFromAddress": {
      "description": "ContractIdPreimageFromAddress is an XDR NestedStruct defines as:\n\n```text struct { SCAddress address; uint256 salt; } ```",
      "type": "object",
      "required": [
        "address",
        "salt"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/ScAddress"
        },
        "salt": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      }
    },
    "CreateAccountOp": {
      "description": "CreateAccountOp is an XDR Struct defines as:\n\n```text struct CreateAccountOp { AccountID destination; // account to create int64 startingBalance; // amount they end up with }; ```",
      "type": "object",
      "required": [
        "destination",
        "starting_balance"
      ],
      "properties": {
        "destination": {
          "$ref": "#/definitions/AccountId"
        },
        "starting_balance": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "CreateClaimableBalanceOp": {
      "description": "CreateClaimableBalanceOp is an XDR Struct defines as:\n\n```text struct CreateClaimableBalanceOp { Asset asset; int64 amount; Claimant claimants<10>; }; ```",
      "type": "object",
      "required": [
        "amount",
        "asset",
        "claimants"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "asset": {
          "$ref": "#/definitions/Asset"
        },
        "claimants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Claimant"
          },
          "maxItems": 10
        }
      }
    },
    "CreateContractArgs": {
      "description": "CreateContractArgs is an XDR Struct defines as:\n\n```text struct CreateContractArgs { ContractIDPreimage contractIDPreimage; ContractExecutable executable; }; ```",
      "type": "object",
      "required": [
        "contract_id_preimage",
        "executable"
      ],
      "properties": {
        "contract_id_preimage": {
          "$ref": "#/definitions/ContractIdPreimage"
        },
        "executable": {
          "$ref": "#/definitions/ContractExecutable"
        }
      }
    },
    "CreateContractArgsV2": {
      "description": "CreateContractArgsV2 is an XDR Struct defines as:\n\n```text struct CreateContractArgsV2 { ContractIDPreimage contractIDPreimage; ContractExecutable executable; // Arguments of the contract's constructor. SCVal constructorArgs<>; }; ```",
      "type": "object",
      "required": [
        "constructor_args",
        "contract_id_preimage",
        "executable"
      ],
      "properties": {
        "constructor_args": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScVal"
          },
          "maxItems": 4294967295
        },
        "contract_id_preimage": {
          "$ref": "#/definitions/ContractIdPreimage"
        },
        "executable": {
          "$ref": "#/definitions/ContractExecutable"
        }
      }
    },
    "CreatePassiveSellOfferOp": {
      "description": "CreatePassiveSellOfferOp is an XDR Struct defines as:\n\n```text struct CreatePassiveSellOfferOp { Asset selling; // A Asset buying;  // B int64 amount;  // amount taker gets Price price;   // cost of A in terms of B }; ```",
      "type": "object",
      "required": [
        "amount",
        "buying",
        "price",
        "selling"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "buying": {
          "$ref": "#/definitions/Asset"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "selling": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "Curve25519Public": {
      "description": "Curve25519Public is an XDR Struct defines as:\n\n```text struct Curve25519Public { opaque key[32]; }; ```",
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "maxItems": 32,
          "minItems": 32
        }
      }
    },
    "DataValue": {
      "description": "DataValue is an XDR Typedef defines as:\n\n```text typedef opaque DataValue<64>; ```",
      "type": "string",
      "maxLength": 128,
      "contentEncoding": "hex",
      "contentMediaType": "application/binary"
    },
    "DecoratedSignature": {
      "description": "DecoratedSignature is an XDR Struct defines as:\n\n```text struct DecoratedSignature { SignatureHint hint;  // last 4 bytes of the public key, used as a hint Signature signature; // actual signature }; ```",
      "type": "object",
      "required": [
        "hint",
        "signature"
      ],
      "properties": {
        "hint": {
          "type": "string",
          "maxLength": 8,
          "minLength": 8,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "signature": {
          "$ref": "#/definitions/Signature"
        }
      }
    },
    "DependentTxCluster": {
      "description": "DependentTxCluster is an XDR Typedef defines as:\n\n```text typedef TransactionEnvelope DependentTxCluster<>; ```",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TransactionEnvelope"
      },
      "maxItems": 4294967295
    },
    "DontHave": {
      "description": "DontHave is an XDR Struct defines as:\n\n```text struct DontHave { MessageType type; uint256 reqHash; }; ```",
      "type": "object",
      "required": [
        "req_hash",
        "type_"
      ],
      "properties": {
        "req_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "type_": {
          "$ref": "#/definitions/MessageType"
        }
      }
    },
    "Duration": {
      "description": "Duration is an XDR Typedef defines as:\n\n```text typedef uint64 Duration; ```",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "EncryptedBody": {
      "description": "EncryptedBody is an XDR Typedef defines as:\n\n```text typedef opaque EncryptedBody<64000>; ```",
      "type": "string",
      "maxLength": 128000,
      "contentEncoding": "hex",
      "contentMediaType": "application/binary"
    },
    "ErrorCode": {
      "description": "ErrorCode is an XDR Enum defines as:\n\n```text enum ErrorCode { ERR_MISC = 0, // Unspecific error ERR_DATA = 1, // Malformed data ERR_CONF = 2, // Misconfiguration error ERR_AUTH = 3, // Authentication failure ERR_LOAD = 4  // System overloaded }; ```",
      "type": "string",
      "enum": [
        "misc",
        "data",
        "conf",
        "auth",
        "load"
      ]
    },
    "ExtendFootprintTtlOp": {
      "description": "ExtendFootprintTtlOp is an XDR Struct defines as:\n\n```text struct ExtendFootprintTTLOp { ExtensionPoint ext; uint32 extendTo; }; ```",
      "type": "object",
      "required": [
        "ext",
        "extend_to"
      ],
      "properties": {
        "ext": {
          "$ref": "#/definitions/ExtensionPoint"
        },
        "extend_to": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ExtensionPoint": {
      "description": "ExtensionPoint is an XDR Union defines as:\n\n```text union ExtensionPoint switch (int v) { case 0: void; }; ```",
      "type": "string",
      "enum": [
        "v0"
      ]
    },
    "FeeBumpTransaction": {
      "description": "FeeBumpTransaction is an XDR Struct defines as:\n\n```text struct FeeBumpTransaction { MuxedAccount feeSource; int64 fee; union switch (EnvelopeType type) { case ENVELOPE_TYPE_TX: TransactionV1Envelope v1; } innerTx; union switch (int v) { case 0: void; } ext; }; ```",
      "type": "object",
      "required": [
        "ext",
        "fee",
        "fee_source",
        "inner_tx"
      ],
      "properties": {
        "ext": {
          "$ref": "#/definitions/FeeBumpTransactionExt"
        },
        "fee": {
          "type": "integer",
          "format": "int64"
        },
        "fee_source": {
          "$ref": "#/definitions/MuxedAccount"
        },
        "inner_tx": {
          "$ref": "#/definitions/FeeBumpTransactionInnerTx"
        }
      }
    },
    "FeeBumpTransactionEnvelope": {
      "description": "FeeBumpTransactionEnvelope is an XDR Struct defines as:\n\n```text struct FeeBumpTransactionEnvelope { FeeBumpTransaction tx; /* Each decorated signature is a signature over the SHA256 hash of * a TransactionSignaturePayload */ DecoratedSignature signatures<20>; }; ```",
      "type": "object",
      "required": [
        "signatures",
        "tx"
      ],
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DecoratedSignature"
          },
          "maxItems": 20
        },
        "tx": {
          "$ref": "#/definitions/FeeBumpTransaction"
        }
      }
    },
    "FeeBumpTransactionExt": {
      "description": "FeeBumpTransactionExt is an XDR NestedUnion defines as:\n\n```text union switch (int v) { case 0: void; } ```",
      "type": "string",
      "enum": [
        "v0"
      ]
    },
    "FeeBumpTransactionInnerTx": {
      "description": "FeeBumpTransactionInnerTx is an XDR NestedUnion defines as:\n\n```text union switch (EnvelopeType type) { case ENVELOPE_TYPE_TX: TransactionV1Envelope v1; } ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "tx"
          ],
          "properties": {
            "tx": {
              "$ref": "#/definitions/TransactionV1Envelope"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FloodAdvert": {
      "description": "FloodAdvert is an XDR Struct defines as:\n\n```text struct FloodAdvert { TxAdvertVector txHashes; }; ```",
      "type": "object",
      "required": [
        "tx_hashes"
      ],
      "properties": {
        "tx_hashes": {
          "$ref": "#/definitions/TxAdvertVector"
        }
      }
    },
    "FloodDemand": {
      "description": "FloodDemand is an XDR Struct defines as:\n\n```text struct FloodDemand { TxDemandVector txHashes; }; ```",
      "type": "object",
      "required": [
        "tx_hashes"
      ],
      "properties": {
        "tx_hashes": {
          "$ref": "#/definitions/TxDemandVector"
        }
      }
    },
    "GeneralizedTransactionSet": {
      "description": "GeneralizedTransactionSet is an XDR Union defines as:\n\n```text union GeneralizedTransactionSet switch (int v) { // We consider the legacy TransactionSet to be v0. case 1: TransactionSetV1 v1TxSet; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "v1"
          ],
          "properties": {
            "v1": {
              "$ref": "#/definitions/TransactionSetV1"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Hello": {
      "description": "Hello is an XDR Struct defines as:\n\n```text struct Hello { uint32 ledgerVersion; uint32 overlayVersion; uint32 overlayMinVersion; Hash networkID; string versionStr<100>; int listeningPort; NodeID peerID; AuthCert cert; uint256 nonce; }; ```",
      "type": "object",
      "required": [
        "cert",
        "ledger_version",
        "listening_port",
        "network_id",
        "nonce",
        "overlay_min_version",
        "overlay_version",
        "peer_id",
        "version_str"
      ],
      "properties": {
        "cert": {
          "$ref": "#/definitions/AuthCert"
        },
        "ledger_version": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "listening_port": {
          "type": "integer",
          "format": "int32"
        },
        "network_id": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "nonce": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "overlay_min_version": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "overlay_version": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "peer_id": {
          "$ref": "#/definitions/NodeId"
        },
        "version_str": {
          "$ref": "#/definitions/StringM<100>"
        }
      }
    },
    "HostFunction": {
      "description": "HostFunction is an XDR Union defines as:\n\n```text union HostFunction switch (HostFunctionType type) { case HOST_FUNCTION_TYPE_INVOKE_CONTRACT: InvokeContractArgs invokeContract; case HOST_FUNCTION_TYPE_CREATE_CONTRACT: CreateContractArgs createContract; case HOST_FUNCTION_TYPE_UPLOAD_CONTRACT_WASM: opaque wasm<>; case HOST_FUNCTION_TYPE_CREATE_CONTRACT_V2: CreateContractArgsV2 createContractV2; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "invoke_contract"
          ],
          "properties": {
            "invoke_contract": {
              "$ref": "#/definitions/InvokeContractArgs"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_contract"
          ],
          "properties": {
            "create_contract": {
              "$ref": "#/definitions/CreateContractArgs"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "upload_contract_wasm"
          ],
          "properties": {
            "upload_contract_wasm": {
              "type": "string",
              "contentEncoding": "hex",
              "contentMediaType": "application/binary"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_contract_v2"
          ],
          "properties": {
            "create_contract_v2": {
              "$ref": "#/definitions/CreateContractArgsV2"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Int128Parts": {
      "description": "Int128Parts is an XDR Struct defines as:\n\n```text struct Int128Parts { int64 hi; uint64 lo; }; ```",
      "type": "object",
      "required": [
        "hi",
        "lo"
      ],
      "properties": {
        "hi": {
          "type": "integer",
          "format": "int64"
        },
        "lo": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Int256Parts": {
      "description": "Int256Parts is an XDR Struct defines as:\n\n```text struct Int256Parts { int64 hi_hi; uint64 hi_lo; uint64 lo_hi; uint64 lo_lo; }; ```",
      "type": "object",
      "required": [
        "hi_hi",
        "hi_lo",
        "lo_hi",
        "lo_lo"
      ],
      "properties": {
        "hi_hi": {
          "type": "integer",
          "format": "int64"
        },
        "hi_lo": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lo_hi": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lo_lo": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "InvokeContractArgs": {
      "description": "InvokeContractArgs is an XDR Struct defines as:\n\n```text struct InvokeContractArgs { SCAddress contractAddress; SCSymbol functionName; SCVal args<>; }; ```",
      "type": "object",
      "required": [
        "args",
        "contract_address",
        "function_name"
      ],
      "properties": {
        "args": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScVal"
          },
          "maxItems": 4294967295
        },
        "contract_address": {
          "$ref": "#/definitions/ScAddress"
        },
        "function_name": {
          "$ref": "#/definitions/ScSymbol"
        }
      }
    },
    "InvokeHostFunctionOp": {
      "description": "InvokeHostFunctionOp is an XDR Struct defines as:\n\n```text struct InvokeHostFunctionOp { // Host function to invoke. HostFunction hostFunction; // Per-address authorizations for this host function. SorobanAuthorizationEntry auth<>; }; ```",
      "type": "object",
      "required": [
        "auth",
        "host_function"
      ],
      "properties": {
        "auth": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SorobanAuthorizationEntry"
          },
          "maxItems": 4294967295
        },
        "host_function": {
          "$ref": "#/definitions/HostFunction"
        }
      }
    },
    "LedgerBounds": {
      "description": "LedgerBounds is an XDR Struct defines as:\n\n```text struct LedgerBounds { uint32 minLedger; uint32 maxLedger; // 0 here means no maxLedger }; ```",
      "type": "object",
      "required": [
        "max_ledger",
        "min_ledger"
      ],
      "properties": {
        "max_ledger": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_ledger": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "LedgerFootprint": {
      "description": "LedgerFootprint is an XDR Struct defines as:\n\n```text struct LedgerFootprint { LedgerKey readOnly<>; LedgerKey readWrite<>; }; ```",
      "type": "object",
      "required": [
        "read_only",
        "read_write"
      ],
      "properties": {
        "read_only": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LedgerKey"
          },
          "maxItems": 4294967295
        },
        "read_write": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LedgerKey"
          },
          "maxItems": 4294967295
        }
      }
    },
    "LedgerKey": {
      "description": "LedgerKey is an XDR Union defines as:\n\n```text union LedgerKey switch (LedgerEntryType type) { case ACCOUNT: struct { AccountID accountID; } account;\n\ncase TRUSTLINE: struct { AccountID accountID; TrustLineAsset asset; } trustLine;\n\ncase OFFER: struct { AccountID sellerID; int64 offerID; } offer;\n\ncase DATA: struct { AccountID accountID; string64 dataName; } data;\n\ncase CLAIMABLE_BALANCE: struct { ClaimableBalanceID balanceID; } claimableBalance;\n\ncase LIQUIDITY_POOL: struct { PoolID liquidityPoolID; } liquidityPool; case CONTRACT_DATA: struct { SCAddress contract; SCVal key; ContractDataDurability durability; } contractData; case CONTRACT_CODE: struct { Hash hash; } contractCode; case CONFIG_SETTING: struct { ConfigSettingID configSettingID; } configSetting; case TTL: struct { // Hash of the LedgerKey that is associated with this TTLEntry Hash keyHash; } ttl; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "account"
          ],
          "properties": {
            "account": {
              "$ref": "#/definitions/LedgerKeyAccount"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "trustline"
          ],
          "properties": {
            "trustline": {
              "$ref": "#/definitions/LedgerKeyTrustLine"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "offer"
          ],
          "properties": {
            "offer": {
              "$ref": "#/definitions/LedgerKeyOffer"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "data"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/LedgerKeyData"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "claimable_balance"
          ],
          "properties": {
            "claimable_balance": {
              "$ref": "#/definitions/LedgerKeyClaimableBalance"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "liquidity_pool"
          ],
          "properties": {
            "liquidity_pool": {
              "$ref": "#/definitions/LedgerKeyLiquidityPool"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_data"
          ],
          "properties": {
            "contract_data": {
              "$ref": "#/definitions/LedgerKeyContractData"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_code"
          ],
          "properties": {
            "contract_code": {
              "$ref": "#/definitions/LedgerKeyContractCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "config_setting"
          ],
          "properties": {
            "config_setting": {
              "$ref": "#/definitions/LedgerKeyConfigSetting"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ttl"
          ],
          "properties": {
            "ttl": {
              "$ref": "#/definitions/LedgerKeyTtl"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LedgerKeyAccount": {
      "description": "LedgerKeyAccount is an XDR NestedStruct defines as:\n\n```text struct { AccountID accountID; } ```",
      "type": "object",
      "required": [
        "account_id"
      ],
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "LedgerKeyClaimableBalance": {
      "description": "LedgerKeyClaimableBalance is an XDR NestedStruct defines as:\n\n```text struct { ClaimableBalanceID balanceID; } ```",
      "type": "object",
      "required": [
        "balance_id"
      ],
      "properties": {
        "balance_id": {
          "$ref": "#/definitions/ClaimableBalanceId"
        }
      }
    },
    "LedgerKeyConfigSetting": {
      "description": "LedgerKeyConfigSetting is an XDR NestedStruct defines as:\n\n```text struct { ConfigSettingID configSettingID; } ```",
      "type": "object",
      "required": [
        "config_setting_id"
      ],
      "properties": {
        "config_setting_id": {
          "$ref": "#/definitions/ConfigSettingId"
        }
      }
    },
    "LedgerKeyContractCode": {
      "description": "LedgerKeyContractCode is an XDR NestedStruct defines as:\n\n```text struct { Hash hash; } ```",
      "type": "object",
      "required": [
        "hash"
      ],
      "properties": {
        "hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      }
    },
    "LedgerKeyContractData": {
      "description": "LedgerKeyContractData is an XDR NestedStruct defines as:\n\n```text struct { SCAddress contract; SCVal key; ContractDataDurability durability; } ```",
      "type": "object",
      "required": [
        "contract",
        "durability",
        "key"
      ],
      "properties": {
        "contract": {
          "$ref": "#/definitions/ScAddress"
        },
        "durability": {
          "$ref": "#/definitions/ContractDataDurability"
        },
        "key": {
          "$ref": "#/definitions/ScVal"
        }
      }
    },
    "LedgerKeyData": {
      "description": "LedgerKeyData is an XDR NestedStruct defines as:\n\n```text struct { AccountID accountID; string64 dataName; } ```",
      "type": "object",
      "required": [
        "account_id",
        "data_name"
      ],
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "data_name": {
          "$ref": "#/definitions/String64"
        }
      }
    },
    "LedgerKeyLiquidityPool": {
      "description": "LedgerKeyLiquidityPool is an XDR NestedStruct defines as:\n\n```text struct { PoolID liquidityPoolID; } ```",
      "type": "object",
      "required": [
        "liquidity_pool_id"
      ],
      "properties": {
        "liquidity_pool_id": {
          "$ref": "#/definitions/PoolId"
        }
      }
    },
    "LedgerKeyOffer": {
      "description": "LedgerKeyOffer is an XDR NestedStruct defines as:\n\n```text struct { AccountID sellerID; int64 offerID; } ```",
      "type": "object",
      "required": [
        "offer_id",
        "seller_id"
      ],
      "properties": {
        "offer_id": {
          "type": "integer",
          "format": "int64"
        },
        "seller_id": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "LedgerKeyTrustLine": {
      "description": "LedgerKeyTrustLine is an XDR NestedStruct defines as:\n\n```text struct { AccountID accountID; TrustLineAsset asset; } ```",
      "type": "object",
      "required": [
        "account_id",
        "asset"
      ],
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "asset": {
          "$ref": "#/definitions/TrustLineAsset"
        }
      }
    },
    "LedgerKeyTtl": {
      "description": "LedgerKeyTtl is an XDR NestedStruct defines as:\n\n```text struct { // Hash of the LedgerKey that is associated with this TTLEntry Hash keyHash; } ```",
      "type": "object",
      "required": [
        "key_hash"
      ],
      "properties": {
        "key_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      }
    },
    "LiquidityPoolConstantProductParameters": {
      "description": "LiquidityPoolConstantProductParameters is an XDR Struct defines as:\n\n```text struct LiquidityPoolConstantProductParameters { Asset assetA; // assetA < assetB Asset assetB; int32 fee; // Fee is in basis points, so the actual rate is (fee/100)% }; ```",
      "type": "object",
      "required": [
        "asset_a",
        "asset_b",
        "fee"
      ],
      "properties": {
        "asset_a": {
          "$ref": "#/definitions/Asset"
        },
        "asset_b": {
          "$ref": "#/definitions/Asset"
        },
        "fee": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LiquidityPoolDepositOp": {
      "description": "LiquidityPoolDepositOp is an XDR Struct defines as:\n\n```text struct LiquidityPoolDepositOp { PoolID liquidityPoolID; int64 maxAmountA; // maximum amount of first asset to deposit int64 maxAmountB; // maximum amount of second asset to deposit Price minPrice;   // minimum depositA/depositB Price maxPrice;   // maximum depositA/depositB }; ```",
      "type": "object",
      "required": [
        "liquidity_pool_id",
        "max_amount_a",
        "max_amount_b",
        "max_price",
        "min_price"
      ],
      "properties": {
        "liquidity_pool_id": {
          "$ref": "#/definitions/PoolId"
        },
        "max_amount_a": {
          "type": "integer",
          "format": "int64"
        },
        "max_amount_b": {
          "type": "integer",
          "format": "int64"
        },
        "max_price": {
          "$ref": "#/definitions/Price"
        },
        "min_price": {
          "$ref": "#/definitions/Price"
        }
      }
    },
    "LiquidityPoolParameters": {
      "description": "LiquidityPoolParameters is an XDR Union defines as:\n\n```text union LiquidityPoolParameters switch (LiquidityPoolType type) { case LIQUIDITY_POOL_CONSTANT_PRODUCT: LiquidityPoolConstantProductParameters constantProduct; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "liquidity_pool_constant_product"
          ],
          "properties": {
            "liquidity_pool_constant_product": {
              "$ref": "#/definitions/LiquidityPoolConstantProductParameters"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LiquidityPoolWithdrawOp": {
      "description": "LiquidityPoolWithdrawOp is an XDR Struct defines as:\n\n```text struct LiquidityPoolWithdrawOp { PoolID liquidityPoolID; int64 amount;     // amount of pool shares to withdraw int64 minAmountA; // minimum amount of first asset to withdraw int64 minAmountB; // minimum amount of second asset to withdraw }; ```",
      "type": "object",
      "required": [
        "amount",
        "liquidity_pool_id",
        "min_amount_a",
        "min_amount_b"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "liquidity_pool_id": {
          "$ref": "#/definitions/PoolId"
        },
        "min_amount_a": {
          "type": "integer",
          "format": "int64"
        },
        "min_amount_b": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ManageBuyOfferOp": {
      "description": "ManageBuyOfferOp is an XDR Struct defines as:\n\n```text struct ManageBuyOfferOp { Asset selling; Asset buying; int64 buyAmount; // amount being bought. if set to 0, delete the offer Price price;     // price of thing being bought in terms of what you are // selling\n\n// 0=create a new offer, otherwise edit an existing offer int64 offerID; }; ```",
      "type": "object",
      "required": [
        "buy_amount",
        "buying",
        "offer_id",
        "price",
        "selling"
      ],
      "properties": {
        "buy_amount": {
          "type": "integer",
          "format": "int64"
        },
        "buying": {
          "$ref": "#/definitions/Asset"
        },
        "offer_id": {
          "type": "integer",
          "format": "int64"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "selling": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "ManageDataOp": {
      "description": "ManageDataOp is an XDR Struct defines as:\n\n```text struct ManageDataOp { string64 dataName; DataValue* dataValue; // set to null to clear }; ```",
      "type": "object",
      "required": [
        "data_name"
      ],
      "properties": {
        "data_name": {
          "$ref": "#/definitions/String64"
        },
        "data_value": {
          "anyOf": [
            {
              "$ref": "#/definitions/DataValue"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ManageSellOfferOp": {
      "description": "ManageSellOfferOp is an XDR Struct defines as:\n\n```text struct ManageSellOfferOp { Asset selling; Asset buying; int64 amount; // amount being sold. if set to 0, delete the offer Price price;  // price of thing being sold in terms of what you are buying\n\n// 0=create a new offer, otherwise edit an existing offer int64 offerID; }; ```",
      "type": "object",
      "required": [
        "amount",
        "buying",
        "offer_id",
        "price",
        "selling"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "buying": {
          "$ref": "#/definitions/Asset"
        },
        "offer_id": {
          "type": "integer",
          "format": "int64"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "selling": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "Memo": {
      "description": "Memo is an XDR Union defines as:\n\n```text union Memo switch (MemoType type) { case MEMO_NONE: void; case MEMO_TEXT: string text<28>; case MEMO_ID: uint64 id; case MEMO_HASH: Hash hash; // the hash of what to pull from the content server case MEMO_RETURN: Hash retHash; // the hash of the tx you are rejecting }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "type": "object",
          "required": [
            "text"
          ],
          "properties": {
            "text": {
              "$ref": "#/definitions/StringM<28>"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "hash"
          ],
          "properties": {
            "hash": {
              "type": "string",
              "maxLength": 64,
              "minLength": 64,
              "contentEncoding": "hex",
              "contentMediaType": "application/binary"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "return"
          ],
          "properties": {
            "return": {
              "type": "string",
              "maxLength": 64,
              "minLength": 64,
              "contentEncoding": "hex",
              "contentMediaType": "application/binary"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MessageType": {
      "description": "MessageType is an XDR Enum defines as:\n\n```text enum MessageType { ERROR_MSG = 0, AUTH = 2, DONT_HAVE = 3, // GET_PEERS (4) is deprecated\n\nPEERS = 5,\n\nGET_TX_SET = 6, // gets a particular txset by hash TX_SET = 7, GENERALIZED_TX_SET = 17,\n\nTRANSACTION = 8, // pass on a tx you have heard about\n\n// SCP GET_SCP_QUORUMSET = 9, SCP_QUORUMSET = 10, SCP_MESSAGE = 11, GET_SCP_STATE = 12,\n\n// new messages HELLO = 13,\n\nSURVEY_REQUEST = 14, SURVEY_RESPONSE = 15,\n\nSEND_MORE = 16, SEND_MORE_EXTENDED = 20,\n\nFLOOD_ADVERT = 18, FLOOD_DEMAND = 19,\n\nTIME_SLICED_SURVEY_REQUEST = 21, TIME_SLICED_SURVEY_RESPONSE = 22, TIME_SLICED_SURVEY_START_COLLECTING = 23, TIME_SLICED_SURVEY_STOP_COLLECTING = 24 }; ```",
      "type": "string",
      "enum": [
        "error_msg",
        "auth",
        "dont_have",
        "peers",
        "get_tx_set",
        "tx_set",
        "generalized_tx_set",
        "transaction",
        "get_scp_quorumset",
        "scp_quorumset",
        "scp_message",
        "get_scp_state",
        "hello",
        "survey_request",
        "survey_response",
        "send_more",
        "send_more_extended",
        "flood_advert",
        "flood_demand",
        "time_sliced_survey_request",
        "time_sliced_survey_response",
        "time_sliced_survey_start_collecting",
        "time_sliced_survey_stop_collecting"
      ]
    },
    "MuxedAccount": {
      "type": "string"
    },
    "NodeId": {
      "type": "string"
    },
    "Operation": {
      "description": "Operation is an XDR Struct defines as:\n\n```text struct Operation { // sourceAccount is the account used to run the operation // if not set, the runtime defaults to \"sourceAccount\" specified at // the transaction level MuxedAccount* sourceAccount;\n\nunion switch (OperationType type) { case CREATE_ACCOUNT: CreateAccountOp createAccountOp; case PAYMENT: PaymentOp paymentOp; case PATH_PAYMENT_STRICT_RECEIVE: PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp; case MANAGE_SELL_OFFER: ManageSellOfferOp manageSellOfferOp; case CREATE_PASSIVE_SELL_OFFER: CreatePassiveSellOfferOp createPassiveSellOfferOp; case SET_OPTIONS: SetOptionsOp setOptionsOp; case CHANGE_TRUST: ChangeTrustOp changeTrustOp; case ALLOW_TRUST: AllowTrustOp allowTrustOp; case ACCOUNT_MERGE: MuxedAccount destination; case INFLATION: void; case MANAGE_DATA: ManageDataOp manageDataOp; case BUMP_SEQUENCE: BumpSequenceOp bumpSequenceOp; case MANAGE_BUY_OFFER: ManageBuyOfferOp manageBuyOfferOp; case PATH_PAYMENT_STRICT_SEND: PathPaymentStrictSendOp pathPaymentStrictSendOp; case CREATE_CLAIMABLE_BALANCE: CreateClaimableBalanceOp createClaimableBalanceOp; case CLAIM_CLAIMABLE_BALANCE: ClaimClaimableBalanceOp claimClaimableBalanceOp; case BEGIN_SPONSORING_FUTURE_RESERVES: BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp; case END_SPONSORING_FUTURE_RESERVES: void; case REVOKE_SPONSORSHIP: RevokeSponsorshipOp revokeSponsorshipOp; case CLAWBACK: ClawbackOp clawbackOp; case CLAWBACK_CLAIMABLE_BALANCE: ClawbackClaimableBalanceOp clawbackClaimableBalanceOp; case SET_TRUST_LINE_FLAGS: SetTrustLineFlagsOp setTrustLineFlagsOp; case LIQUIDITY_POOL_DEPOSIT: LiquidityPoolDepositOp liquidityPoolDepositOp; case LIQUIDITY_POOL_WITHDRAW: LiquidityPoolWithdrawOp liquidityPoolWithdrawOp; case INVOKE_HOST_FUNCTION: InvokeHostFunctionOp invokeHostFunctionOp; case EXTEND_FOOTPRINT_TTL: ExtendFootprintTTLOp extendFootprintTTLOp; case RESTORE_FOOTPRINT: RestoreFootprintOp restoreFootprintOp; } body; }; ```",
      "type": "object",
      "required": [
        "body"
      ],
      "properties": {
        "body": {
          "$ref": "#/definitions/OperationBody"
        },
        "source_account": {
          "anyOf": [
            {
              "$ref": "#/definitions/MuxedAccount"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "OperationBody": {
      "description": "OperationBody is an XDR NestedUnion defines as:\n\n```text union switch (OperationType type) { case CREATE_ACCOUNT: CreateAccountOp createAccountOp; case PAYMENT: PaymentOp paymentOp; case PATH_PAYMENT_STRICT_RECEIVE: PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp; case MANAGE_SELL_OFFER: ManageSellOfferOp manageSellOfferOp; case CREATE_PASSIVE_SELL_OFFER: CreatePassiveSellOfferOp createPassiveSellOfferOp; case SET_OPTIONS: SetOptionsOp setOptionsOp; case CHANGE_TRUST: ChangeTrustOp changeTrustOp; case ALLOW_TRUST: AllowTrustOp allowTrustOp; case ACCOUNT_MERGE: MuxedAccount destination; case INFLATION: void; case MANAGE_DATA: ManageDataOp manageDataOp; case BUMP_SEQUENCE: BumpSequenceOp bumpSequenceOp; case MANAGE_BUY_OFFER: ManageBuyOfferOp manageBuyOfferOp; case PATH_PAYMENT_STRICT_SEND: PathPaymentStrictSendOp pathPaymentStrictSendOp; case CREATE_CLAIMABLE_BALANCE: CreateClaimableBalanceOp createClaimableBalanceOp; case CLAIM_CLAIMABLE_BALANCE: ClaimClaimableBalanceOp claimClaimableBalanceOp; case BEGIN_SPONSORING_FUTURE_RESERVES: BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp; case END_SPONSORING_FUTURE_RESERVES: void; case REVOKE_SPONSORSHIP: RevokeSponsorshipOp revokeSponsorshipOp; case CLAWBACK: ClawbackOp clawbackOp; case CLAWBACK_CLAIMABLE_BALANCE: ClawbackClaimableBalanceOp clawbackClaimableBalanceOp; case SET_TRUST_LINE_FLAGS: SetTrustLineFlagsOp setTrustLineFlagsOp; case LIQUIDITY_POOL_DEPOSIT: LiquidityPoolDepositOp liquidityPoolDepositOp; case LIQUIDITY_POOL_WITHDRAW: LiquidityPoolWithdrawOp liquidityPoolWithdrawOp; case INVOKE_HOST_FUNCTION: InvokeHostFunctionOp invokeHostFunctionOp; case EXTEND_FOOTPRINT_TTL: ExtendFootprintTTLOp extendFootprintTTLOp; case RESTORE_FOOTPRINT: RestoreFootprintOp restoreFootprintOp; } ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "inflation",
            "end_sponsoring_future_reserves"
          ]
        },
        {
          "type": "object",
          "required": [
            "create_account"
          ],
          "properties": {
            "create_account": {
              "$ref": "#/definitions/CreateAccountOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "payment"
          ],
          "properties": {
            "payment": {
              "$ref": "#/definitions/PaymentOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "path_payment_strict_receive"
          ],
          "properties": {
            "path_payment_strict_receive": {
              "$ref": "#/definitions/PathPaymentStrictReceiveOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "manage_sell_offer"
          ],
          "properties": {
            "manage_sell_offer": {
              "$ref": "#/definitions/ManageSellOfferOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_passive_sell_offer"
          ],
          "properties": {
            "create_passive_sell_offer": {
              "$ref": "#/definitions/CreatePassiveSellOfferOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "set_options"
          ],
          "properties": {
            "set_options": {
              "$ref": "#/definitions/SetOptionsOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "change_trust"
          ],
          "properties": {
            "change_trust": {
              "$ref": "#/definitions/ChangeTrustOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "allow_trust"
          ],
          "properties": {
            "allow_trust": {
              "$ref": "#/definitions/AllowTrustOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "account_merge"
          ],
          "properties": {
            "account_merge": {
              "$ref": "#/definitions/MuxedAccount"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "manage_data"
          ],
          "properties": {
            "manage_data": {
              "$ref": "#/definitions/ManageDataOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "bump_sequence"
          ],
          "properties": {
            "bump_sequence": {
              "$ref": "#/definitions/BumpSequenceOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "manage_buy_offer"
          ],
          "properties": {
            "manage_buy_offer": {
              "$ref": "#/definitions/ManageBuyOfferOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "path_payment_strict_send"
          ],
          "properties": {
            "path_payment_strict_send": {
              "$ref": "#/definitions/PathPaymentStrictSendOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_claimable_balance"
          ],
          "properties": {
            "create_claimable_balance": {
              "$ref": "#/definitions/CreateClaimableBalanceOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "claim_claimable_balance"
          ],
          "properties": {
            "claim_claimable_balance": {
              "$ref": "#/definitions/ClaimClaimableBalanceOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "begin_sponsoring_future_reserves"
          ],
          "properties": {
            "begin_sponsoring_future_reserves": {
              "$ref": "#/definitions/BeginSponsoringFutureReservesOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "revoke_sponsorship"
          ],
          "properties": {
            "revoke_sponsorship": {
              "$ref": "#/definitions/RevokeSponsorshipOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "clawback"
          ],
          "properties": {
            "clawback": {
              "$ref": "#/definitions/ClawbackOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "clawback_claimable_balance"
          ],
          "properties": {
            "clawback_claimable_balance": {
              "$ref": "#/definitions/ClawbackClaimableBalanceOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "set_trust_line_flags"
          ],
          "properties": {
            "set_trust_line_flags": {
              "$ref": "#/definitions/SetTrustLineFlagsOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "liquidity_pool_deposit"
          ],
          "properties": {
            "liquidity_pool_deposit": {
              "$ref": "#/definitions/LiquidityPoolDepositOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "liquidity_pool_withdraw"
          ],
          "properties": {
            "liquidity_pool_withdraw": {
              "$ref": "#/definitions/LiquidityPoolWithdrawOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "invoke_host_function"
          ],
          "properties": {
            "invoke_host_function": {
              "$ref": "#/definitions/InvokeHostFunctionOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "extend_footprint_ttl"
          ],
          "properties": {
            "extend_footprint_ttl": {
              "$ref": "#/definitions/ExtendFootprintTtlOp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "restore_footprint"
          ],
          "properties": {
            "restore_footprint": {
              "$ref": "#/definitions/RestoreFootprintOp"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ParallelTxExecutionStage": {
      "description": "ParallelTxExecutionStage is an XDR Typedef defines as:\n\n```text typedef DependentTxCluster ParallelTxExecutionStage<>; ```",
      "type": "array",
      "items": {
        "$ref": "#/definitions/DependentTxCluster"
      },
      "maxItems": 4294967295
    },
    "ParallelTxsComponent": {
      "description": "ParallelTxsComponent is an XDR Struct defines as:\n\n```text struct ParallelTxsComponent { int64* baseFee; // A sequence of stages that *may* have arbitrary data dependencies between // each other, i.e. in a general case the stage execution order may not be // arbitrarily shuffled without affecting the end result. ParallelTxExecutionStage executionStages<>; }; ```",
      "type": "object",
      "required": [
        "execution_stages"
      ],
      "properties": {
        "base_fee": {
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "execution_stages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ParallelTxExecutionStage"
          },
          "maxItems": 4294967295
        }
      }
    },
    "PathPaymentStrictReceiveOp": {
      "description": "PathPaymentStrictReceiveOp is an XDR Struct defines as:\n\n```text struct PathPaymentStrictReceiveOp { Asset sendAsset; // asset we pay with int64 sendMax;   // the maximum amount of sendAsset to // send (excluding fees). // The operation will fail if can't be met\n\nMuxedAccount destination; // recipient of the payment Asset destAsset;          // what they end up with int64 destAmount;         // amount they end up with\n\nAsset path<5>; // additional hops it must go through to get there }; ```",
      "type": "object",
      "required": [
        "dest_amount",
        "dest_asset",
        "destination",
        "path",
        "send_asset",
        "send_max"
      ],
      "properties": {
        "dest_amount": {
          "type": "integer",
          "format": "int64"
        },
        "dest_asset": {
          "$ref": "#/definitions/Asset"
        },
        "destination": {
          "$ref": "#/definitions/MuxedAccount"
        },
        "path": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "maxItems": 5
        },
        "send_asset": {
          "$ref": "#/definitions/Asset"
        },
        "send_max": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "PathPaymentStrictSendOp": {
      "description": "PathPaymentStrictSendOp is an XDR Struct defines as:\n\n```text struct PathPaymentStrictSendOp { Asset sendAsset;  // asset we pay with int64 sendAmount; // amount of sendAsset to send (excluding fees)\n\nMuxedAccount destination; // recipient of the payment Asset destAsset;          // what they end up with int64 destMin;            // the minimum amount of dest asset to // be received // The operation will fail if it can't be met\n\nAsset path<5>; // additional hops it must go through to get there }; ```",
      "type": "object",
      "required": [
        "dest_asset",
        "dest_min",
        "destination",
        "path",
        "send_amount",
        "send_asset"
      ],
      "properties": {
        "dest_asset": {
          "$ref": "#/definitions/Asset"
        },
        "dest_min": {
          "type": "integer",
          "format": "int64"
        },
        "destination": {
          "$ref": "#/definitions/MuxedAccount"
        },
        "path": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Asset"
          },
          "maxItems": 5
        },
        "send_amount": {
          "type": "integer",
          "format": "int64"
        },
        "send_asset": {
          "$ref": "#/definitions/Asset"
        }
      }
    },
    "PaymentOp": {
      "description": "PaymentOp is an XDR Struct defines as:\n\n```text struct PaymentOp { MuxedAccount destination; // recipient of the payment Asset asset;              // what they end up with int64 amount;             // amount they end up with }; ```",
      "type": "object",
      "required": [
        "amount",
        "asset",
        "destination"
      ],
      "properties": {
        "amount": {
          "type": "integer",
          "format": "int64"
        },
        "asset": {
          "$ref": "#/definitions/Asset"
        },
        "destination": {
          "$ref": "#/definitions/MuxedAccount"
        }
      }
    },
    "PeerAddress": {
      "description": "PeerAddress is an XDR Struct defines as:\n\n```text struct PeerAddress { union switch (IPAddrType type) { case IPv4: opaque ipv4[4]; case IPv6: opaque ipv6[16]; } ip; uint32 port; uint32 numFailures; }; ```",
      "type": "object",
      "required": [
        "ip",
        "num_failures",
        "port"
      ],
      "properties": {
        "ip": {
          "$ref": "#/definitions/PeerAddressIp"
        },
        "num_failures": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "port": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "PeerAddressIp": {
      "description": "PeerAddressIp is an XDR NestedUnion defines as:\n\n```text union switch (IPAddrType type) { case IPv4: opaque ipv4[4]; case IPv6: opaque ipv6[16]; } ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "i_pv4"
          ],
          "properties": {
            "i_pv4": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 4,
              "minItems": 4
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "i_pv6"
          ],
          "properties": {
            "i_pv6": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "maxItems": 16,
              "minItems": 16
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PoolId": {
      "description": "PoolId is an XDR Typedef defines as:\n\n```text typedef Hash PoolID; ```",
      "type": "string",
      "maxLength": 64,
      "minLength": 64,
      "contentEncoding": "hex",
      "contentMediaType": "application/binary"
    },
    "Preconditions": {
      "description": "Preconditions is an XDR Union defines as:\n\n```text union Preconditions switch (PreconditionType type) { case PRECOND_NONE: void; case PRECOND_TIME: TimeBounds timeBounds; case PRECOND_V2: PreconditionsV2 v2; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "none"
          ]
        },
        {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "$ref": "#/definitions/TimeBounds"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "v2"
          ],
          "properties": {
            "v2": {
              "$ref": "#/definitions/PreconditionsV2"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PreconditionsV2": {
      "description": "PreconditionsV2 is an XDR Struct defines as:\n\n```text struct PreconditionsV2 { TimeBounds* timeBounds;\n\n// Transaction only valid for ledger numbers n such that // minLedger <= n < maxLedger (if maxLedger == 0, then // only minLedger is checked) LedgerBounds* ledgerBounds;\n\n// If NULL, only valid when sourceAccount's sequence number // is seqNum - 1.  Otherwise, valid when sourceAccount's // sequence number n satisfies minSeqNum <= n < tx.seqNum. // Note that after execution the account's sequence number // is always raised to tx.seqNum, and a transaction is not // valid if tx.seqNum is too high to ensure replay protection. SequenceNumber* minSeqNum;\n\n// For the transaction to be valid, the current ledger time must // be at least minSeqAge greater than sourceAccount's seqTime. Duration minSeqAge;\n\n// For the transaction to be valid, the current ledger number // must be at least minSeqLedgerGap greater than sourceAccount's // seqLedger. uint32 minSeqLedgerGap;\n\n// For the transaction to be valid, there must be a signature // corresponding to every Signer in this array, even if the // signature is not otherwise required by the sourceAccount or // operations. SignerKey extraSigners<2>; }; ```",
      "type": "object",
      "required": [
        "extra_signers",
        "min_seq_age",
        "min_seq_ledger_gap"
      ],
      "properties": {
        "extra_signers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SignerKey"
          },
          "maxItems": 2
        },
        "ledger_bounds": {
          "anyOf": [
            {
              "$ref": "#/definitions/LedgerBounds"
            },
            {
              "type": "null"
            }
          ]
        },
        "min_seq_age": {
          "$ref": "#/definitions/Duration"
        },
        "min_seq_ledger_gap": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_seq_num": {
          "anyOf": [
            {
              "$ref": "#/definitions/SequenceNumber"
            },
            {
              "type": "null"
            }
          ]
        },
        "time_bounds": {
          "anyOf": [
            {
              "$ref": "#/definitions/TimeBounds"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Price": {
      "description": "Price is an XDR Struct defines as:\n\n```text struct Price { int32 n; // numerator int32 d; // denominator }; ```",
      "type": "object",
      "required": [
        "d",
        "n"
      ],
      "properties": {
        "d": {
          "type": "integer",
          "format": "int32"
        },
        "n": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RestoreFootprintOp": {
      "description": "RestoreFootprintOp is an XDR Struct defines as:\n\n```text struct RestoreFootprintOp { ExtensionPoint ext; }; ```",
      "type": "object",
      "required": [
        "ext"
      ],
      "properties": {
        "ext": {
          "$ref": "#/definitions/ExtensionPoint"
        }
      }
    },
    "RevokeSponsorshipOp": {
      "description": "RevokeSponsorshipOp is an XDR Union defines as:\n\n```text union RevokeSponsorshipOp switch (RevokeSponsorshipType type) { case REVOKE_SPONSORSHIP_LEDGER_ENTRY: LedgerKey ledgerKey; case REVOKE_SPONSORSHIP_SIGNER: struct { AccountID accountID; SignerKey signerKey; } signer; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "ledger_entry"
          ],
          "properties": {
            "ledger_entry": {
              "$ref": "#/definitions/LedgerKey"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "signer"
          ],
          "properties": {
            "signer": {
              "$ref": "#/definitions/RevokeSponsorshipOpSigner"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RevokeSponsorshipOpSigner": {
      "description": "RevokeSponsorshipOpSigner is an XDR NestedStruct defines as:\n\n```text struct { AccountID accountID; SignerKey signerKey; } ```",
      "type": "object",
      "required": [
        "account_id",
        "signer_key"
      ],
      "properties": {
        "account_id": {
          "$ref": "#/definitions/AccountId"
        },
        "signer_key": {
          "$ref": "#/definitions/SignerKey"
        }
      }
    },
    "SError": {
      "description": "SError is an XDR Struct defines as:\n\n```text struct Error { ErrorCode code; string msg<100>; }; ```",
      "type": "object",
      "required": [
        "code",
        "msg"
      ],
      "properties": {
        "code": {
          "$ref": "#/definitions/ErrorCode"
        },
        "msg": {
          "$ref": "#/definitions/StringM<100>"
        }
      }
    },
    "ScAddress": {
      "type": "string"
    },
    "ScBytes": {
      "description": "ScBytes is an XDR Typedef defines as:\n\n```text typedef opaque SCBytes<>; ```",
      "type": "string",
      "contentEncoding": "hex",
      "contentMediaType": "application/binary"
    },
    "ScContractInstance": {
      "description": "ScContractInstance is an XDR Struct defines as:\n\n```text struct SCContractInstance { ContractExecutable executable; SCMap* storage; }; ```",
      "type": "object",
      "required": [
        "executable"
      ],
      "properties": {
        "executable": {
          "$ref": "#/definitions/ContractExecutable"
        },
        "storage": {
          "anyOf": [
            {
              "$ref": "#/definitions/ScMap"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ScError": {
      "description": "ScError is an XDR Union defines as:\n\n```text union SCError switch (SCErrorType type) { case SCE_CONTRACT: uint32 contractCode; case SCE_WASM_VM: case SCE_CONTEXT: case SCE_STORAGE: case SCE_OBJECT: case SCE_CRYPTO: case SCE_EVENTS: case SCE_BUDGET: case SCE_VALUE: case SCE_AUTH: SCErrorCode code; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "contract"
          ],
          "properties": {
            "contract": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm_vm"
          ],
          "properties": {
            "wasm_vm": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "context"
          ],
          "properties": {
            "context": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "storage"
          ],
          "properties": {
            "storage": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "object"
          ],
          "properties": {
            "object": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "crypto"
          ],
          "properties": {
            "crypto": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "events"
          ],
          "properties": {
            "events": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "budget"
          ],
          "properties": {
            "budget": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "auth"
          ],
          "properties": {
            "auth": {
              "$ref": "#/definitions/ScErrorCode"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ScErrorCode": {
      "description": "ScErrorCode is an XDR Enum defines as:\n\n```text enum SCErrorCode { SCEC_ARITH_DOMAIN = 0,      // Some arithmetic was undefined (overflow, divide-by-zero). SCEC_INDEX_BOUNDS = 1,      // Something was indexed beyond its bounds. SCEC_INVALID_INPUT = 2,     // User provided some otherwise-bad data. SCEC_MISSING_VALUE = 3,     // Some value was required but not provided. SCEC_EXISTING_VALUE = 4,    // Some value was provided where not allowed. SCEC_EXCEEDED_LIMIT = 5,    // Some arbitrary limit -- gas or otherwise -- was hit. SCEC_INVALID_ACTION = 6,    // Data was valid but action requested was not. SCEC_INTERNAL_ERROR = 7,    // The host detected an error in its own logic. SCEC_UNEXPECTED_TYPE = 8,   // Some type wasn't as expected. SCEC_UNEXPECTED_SIZE = 9    // Something's size wasn't as expected. }; ```",
      "type": "string",
      "enum": [
        "arith_domain",
        "index_bounds",
        "invalid_input",
        "missing_value",
        "existing_value",
        "exceeded_limit",
        "invalid_action",
        "internal_error",
        "unexpected_type",
        "unexpected_size"
      ]
    },
    "ScMap": {
      "description": "ScMap is an XDR Typedef defines as:\n\n```text typedef SCMapEntry SCMap<>; ```",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ScMapEntry"
      },
      "maxItems": 4294967295
    },
    "ScMapEntry": {
      "description": "ScMapEntry is an XDR Struct defines as:\n\n```text struct SCMapEntry { SCVal key; SCVal val; }; ```",
      "type": "object",
      "required": [
        "key",
        "val"
      ],
      "properties": {
        "key": {
          "$ref": "#/definitions/ScVal"
        },
        "val": {
          "$ref": "#/definitions/ScVal"
        }
      }
    },
    "ScNonceKey": {
      "description": "ScNonceKey is an XDR Struct defines as:\n\n```text struct SCNonceKey { int64 nonce; }; ```",
      "type": "object",
      "required": [
        "nonce"
      ],
      "properties": {
        "nonce": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ScString": {
      "description": "ScString is an XDR Typedef defines as:\n\n```text typedef string SCString<>; ```",
      "$ref": "#/definitions/StringM<4294967295>"
    },
    "ScSymbol": {
      "description": "ScSymbol is an XDR Typedef defines as:\n\n```text typedef string SCSymbol<SCSYMBOL_LIMIT>; ```",
      "$ref": "#/definitions/StringM<32>"
    },
    "ScVal": {
      "description": "ScVal is an XDR Union defines as:\n\n```text union SCVal switch (SCValType type) {\n\ncase SCV_BOOL: bool b; case SCV_VOID: void; case SCV_ERROR: SCError error;\n\ncase SCV_U32: uint32 u32; case SCV_I32: int32 i32;\n\ncase SCV_U64: uint64 u64; case SCV_I64: int64 i64; case SCV_TIMEPOINT: TimePoint timepoint; case SCV_DURATION: Duration duration;\n\ncase SCV_U128: UInt128Parts u128; case SCV_I128: Int128Parts i128;\n\ncase SCV_U256: UInt256Parts u256; case SCV_I256: Int256Parts i256;\n\ncase SCV_BYTES: SCBytes bytes; case SCV_STRING: SCString str; case SCV_SYMBOL: SCSymbol sym;\n\n// Vec and Map are recursive so need to live // behind an option, due to xdrpp limitations. case SCV_VEC: SCVec *vec; case SCV_MAP: SCMap *map;\n\ncase SCV_ADDRESS: SCAddress address;\n\n// Special SCVals reserved for system-constructed contract-data // ledger keys, not generally usable elsewhere. case SCV_LEDGER_KEY_CONTRACT_INSTANCE: void; case SCV_LEDGER_KEY_NONCE: SCNonceKey nonce_key;\n\ncase SCV_CONTRACT_INSTANCE: SCContractInstance instance; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "void",
            "ledger_key_contract_instance"
          ]
        },
        {
          "type": "object",
          "required": [
            "bool"
          ],
          "properties": {
            "bool": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "error"
          ],
          "properties": {
            "error": {
              "$ref": "#/definitions/ScError"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "u32"
          ],
          "properties": {
            "u32": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "i32"
          ],
          "properties": {
            "i32": {
              "type": "integer",
              "format": "int32"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "u64"
          ],
          "properties": {
            "u64": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "i64"
          ],
          "properties": {
            "i64": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "timepoint"
          ],
          "properties": {
            "timepoint": {
              "$ref": "#/definitions/TimePoint"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "duration"
          ],
          "properties": {
            "duration": {
              "$ref": "#/definitions/Duration"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "u128"
          ],
          "properties": {
            "u128": {
              "$ref": "#/definitions/UInt128Parts"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "i128"
          ],
          "properties": {
            "i128": {
              "$ref": "#/definitions/Int128Parts"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "u256"
          ],
          "properties": {
            "u256": {
              "$ref": "#/definitions/UInt256Parts"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "i256"
          ],
          "properties": {
            "i256": {
              "$ref": "#/definitions/Int256Parts"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "bytes"
          ],
          "properties": {
            "bytes": {
              "$ref": "#/definitions/ScBytes"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "string"
          ],
          "properties": {
            "string": {
              "$ref": "#/definitions/ScString"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "symbol"
          ],
          "properties": {
            "symbol": {
              "$ref": "#/definitions/ScSymbol"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "vec"
          ],
          "properties": {
            "vec": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ScVec"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "map"
          ],
          "properties": {
            "map": {
              "anyOf": [
                {
                  "$ref": "#/definitions/ScMap"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/ScAddress"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ledger_key_nonce"
          ],
          "properties": {
            "ledger_key_nonce": {
              "$ref": "#/definitions/ScNonceKey"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_instance"
          ],
          "properties": {
            "contract_instance": {
              "$ref": "#/definitions/ScContractInstance"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ScVec": {
      "description": "ScVec is an XDR Typedef defines as:\n\n```text typedef SCVal SCVec<>; ```",
      "type": "array",
      "items": {
        "$ref": "#/definitions/ScVal"
      },
      "maxItems": 4294967295
    },
    "ScpBallot": {
      "description": "ScpBallot is an XDR Struct defines as:\n\n```text struct SCPBallot { uint32 counter; // n Value value;    // x }; ```",
      "type": "object",
      "required": [
        "counter",
        "value"
      ],
      "properties": {
        "counter": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "value": {
          "$ref": "#/definitions/Value"
        }
      }
    },
    "ScpEnvelope": {
      "description": "ScpEnvelope is an XDR Struct defines as:\n\n```text struct SCPEnvelope { SCPStatement statement; Signature signature; }; ```",
      "type": "object",
      "required": [
        "signature",
        "statement"
      ],
      "properties": {
        "signature": {
          "$ref": "#/definitions/Signature"
        },
        "statement": {
          "$ref": "#/definitions/ScpStatement"
        }
      }
    },
    "ScpNomination": {
      "description": "ScpNomination is an XDR Struct defines as:\n\n```text struct SCPNomination { Hash quorumSetHash; // D Value votes<>;      // X Value accepted<>;   // Y }; ```",
      "type": "object",
      "required": [
        "accepted",
        "quorum_set_hash",
        "votes"
      ],
      "properties": {
        "accepted": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Value"
          },
          "maxItems": 4294967295
        },
        "quorum_set_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Value"
          },
          "maxItems": 4294967295
        }
      }
    },
    "ScpQuorumSet": {
      "description": "ScpQuorumSet is an XDR Struct defines as:\n\n```text struct SCPQuorumSet { uint32 threshold; NodeID validators<>; SCPQuorumSet innerSets<>; }; ```",
      "type": "object",
      "required": [
        "inner_sets",
        "threshold",
        "validators"
      ],
      "properties": {
        "inner_sets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScpQuorumSet"
          },
          "maxItems": 4294967295
        },
        "threshold": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "validators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeId"
          },
          "maxItems": 4294967295
        }
      }
    },
    "ScpStatement": {
      "description": "ScpStatement is an XDR Struct defines as:\n\n```text struct SCPStatement { NodeID nodeID;    // v uint64 slotIndex; // i\n\nunion switch (SCPStatementType type) { case SCP_ST_PREPARE: struct { Hash quorumSetHash;       // D SCPBallot ballot;         // b SCPBallot* prepared;      // p SCPBallot* preparedPrime; // p' uint32 nC;                // c.n uint32 nH;                // h.n } prepare; case SCP_ST_CONFIRM: struct { SCPBallot ballot;   // b uint32 nPrepared;   // p.n uint32 nCommit;     // c.n uint32 nH;          // h.n Hash quorumSetHash; // D } confirm; case SCP_ST_EXTERNALIZE: struct { SCPBallot commit;         // c uint32 nH;                // h.n Hash commitQuorumSetHash; // D used before EXTERNALIZE } externalize; case SCP_ST_NOMINATE: SCPNomination nominate; } pledges; }; ```",
      "type": "object",
      "required": [
        "node_id",
        "pledges",
        "slot_index"
      ],
      "properties": {
        "node_id": {
          "$ref": "#/definitions/NodeId"
        },
        "pledges": {
          "$ref": "#/definitions/ScpStatementPledges"
        },
        "slot_index": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "ScpStatementConfirm": {
      "description": "ScpStatementConfirm is an XDR NestedStruct defines as:\n\n```text struct { SCPBallot ballot;   // b uint32 nPrepared;   // p.n uint32 nCommit;     // c.n uint32 nH;          // h.n Hash quorumSetHash; // D } ```",
      "type": "object",
      "required": [
        "ballot",
        "n_commit",
        "n_h",
        "n_prepared",
        "quorum_set_hash"
      ],
      "properties": {
        "ballot": {
          "$ref": "#/definitions/ScpBallot"
        },
        "n_commit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "n_h": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "n_prepared": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "quorum_set_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      }
    },
    "ScpStatementExternalize": {
      "description": "ScpStatementExternalize is an XDR NestedStruct defines as:\n\n```text struct { SCPBallot commit;         // c uint32 nH;                // h.n Hash commitQuorumSetHash; // D used before EXTERNALIZE } ```",
      "type": "object",
      "required": [
        "commit",
        "commit_quorum_set_hash",
        "n_h"
      ],
      "properties": {
        "commit": {
          "$ref": "#/definitions/ScpBallot"
        },
        "commit_quorum_set_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "n_h": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "ScpStatementPledges": {
      "description": "ScpStatementPledges is an XDR NestedUnion defines as:\n\n```text union switch (SCPStatementType type) { case SCP_ST_PREPARE: struct { Hash quorumSetHash;       // D SCPBallot ballot;         // b SCPBallot* prepared;      // p SCPBallot* preparedPrime; // p' uint32 nC;                // c.n uint32 nH;                // h.n } prepare; case SCP_ST_CONFIRM: struct { SCPBallot ballot;   // b uint32 nPrepared;   // p.n uint32 nCommit;     // c.n uint32 nH;          // h.n Hash quorumSetHash; // D } confirm; case SCP_ST_EXTERNALIZE: struct { SCPBallot commit;         // c uint32 nH;                // h.n Hash commitQuorumSetHash; // D used before EXTERNALIZE } externalize; case SCP_ST_NOMINATE: SCPNomination nominate; } ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "prepare"
          ],
          "properties": {
            "prepare": {
              "$ref": "#/definitions/ScpStatementPrepare"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "confirm"
          ],
          "properties": {
            "confirm": {
              "$ref": "#/definitions/ScpStatementConfirm"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "externalize"
          ],
          "properties": {
            "externalize": {
              "$ref": "#/definitions/ScpStatementExternalize"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "nominate"
          ],
          "properties": {
            "nominate": {
              "$ref": "#/definitions/ScpNomination"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ScpStatementPrepare": {
      "description": "ScpStatementPrepare is an XDR NestedStruct defines as:\n\n```text struct { Hash quorumSetHash;       // D SCPBallot ballot;         // b SCPBallot* prepared;      // p SCPBallot* preparedPrime; // p' uint32 nC;                // c.n uint32 nH;                // h.n } ```",
      "type": "object",
      "required": [
        "ballot",
        "n_c",
        "n_h",
        "quorum_set_hash"
      ],
      "properties": {
        "ballot": {
          "$ref": "#/definitions/ScpBallot"
        },
        "n_c": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "n_h": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "prepared": {
          "anyOf": [
            {
              "$ref": "#/definitions/ScpBallot"
            },
            {
              "type": "null"
            }
          ]
        },
        "prepared_prime": {
          "anyOf": [
            {
              "$ref": "#/definitions/ScpBallot"
            },
            {
              "type": "null"
            }
          ]
        },
        "quorum_set_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      }
    },
    "SendMore": {
      "description": "SendMore is an XDR Struct defines as:\n\n```text struct SendMore { uint32 numMessages; }; ```",
      "type": "object",
      "required": [
        "num_messages"
      ],
      "properties": {
        "num_messages": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "SendMoreExtended": {
      "description": "SendMoreExtended is an XDR Struct defines as:\n\n```text struct SendMoreExtended { uint32 numMessages; uint32 numBytes; }; ```",
      "type": "object",
      "required": [
        "num_bytes",
        "num_messages"
      ],
      "properties": {
        "num_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "num_messages": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "SequenceNumber": {
      "description": "SequenceNumber is an XDR Typedef defines as:\n\n```text typedef int64 SequenceNumber; ```",
      "type": "integer",
      "format": "int64"
    },
    "SetOptionsOp": {
      "description": "SetOptionsOp is an XDR Struct defines as:\n\n```text struct SetOptionsOp { AccountID* inflationDest; // sets the inflation destination\n\nuint32* clearFlags; // which flags to clear uint32* setFlags;   // which flags to set\n\n// account threshold manipulation uint32* masterWeight; // weight of the master account uint32* lowThreshold; uint32* medThreshold; uint32* highThreshold;\n\nstring32* homeDomain; // sets the home domain\n\n// Add, update or remove a signer for the account // signer is deleted if the weight is 0 Signer* signer; }; ```",
      "type": "object",
      "properties": {
        "clear_flags": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "high_threshold": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "home_domain": {
          "anyOf": [
            {
              "$ref": "#/definitions/String32"
            },
            {
              "type": "null"
            }
          ]
        },
        "inflation_dest": {
          "anyOf": [
            {
              "$ref": "#/definitions/AccountId"
            },
            {
              "type": "null"
            }
          ]
        },
        "low_threshold": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "master_weight": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "med_threshold": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "set_flags": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "signer": {
          "anyOf": [
            {
              "$ref": "#/definitions/Signer"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "SetTrustLineFlagsOp": {
      "description": "SetTrustLineFlagsOp is an XDR Struct defines as:\n\n```text struct SetTrustLineFlagsOp { AccountID trustor; Asset asset;\n\nuint32 clearFlags; // which flags to clear uint32 setFlags;   // which flags to set }; ```",
      "type": "object",
      "required": [
        "asset",
        "clear_flags",
        "set_flags",
        "trustor"
      ],
      "properties": {
        "asset": {
          "$ref": "#/definitions/Asset"
        },
        "clear_flags": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "set_flags": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trustor": {
          "$ref": "#/definitions/AccountId"
        }
      }
    },
    "Signature": {
      "description": "Signature is an XDR Typedef defines as:\n\n```text typedef opaque Signature<64>; ```",
      "type": "string",
      "maxLength": 128,
      "contentEncoding": "hex",
      "contentMediaType": "application/binary"
    },
    "SignedSurveyRequestMessage": {
      "description": "SignedSurveyRequestMessage is an XDR Struct defines as:\n\n```text struct SignedSurveyRequestMessage { Signature requestSignature; SurveyRequestMessage request; }; ```",
      "type": "object",
      "required": [
        "request",
        "request_signature"
      ],
      "properties": {
        "request": {
          "$ref": "#/definitions/SurveyRequestMessage"
        },
        "request_signature": {
          "$ref": "#/definitions/Signature"
        }
      }
    },
    "SignedSurveyResponseMessage": {
      "description": "SignedSurveyResponseMessage is an XDR Struct defines as:\n\n```text struct SignedSurveyResponseMessage { Signature responseSignature; SurveyResponseMessage response; }; ```",
      "type": "object",
      "required": [
        "response",
        "response_signature"
      ],
      "properties": {
        "response": {
          "$ref": "#/definitions/SurveyResponseMessage"
        },
        "response_signature": {
          "$ref": "#/definitions/Signature"
        }
      }
    },
    "SignedTimeSlicedSurveyRequestMessage": {
      "description": "SignedTimeSlicedSurveyRequestMessage is an XDR Struct defines as:\n\n```text struct SignedTimeSlicedSurveyRequestMessage { Signature requestSignature; TimeSlicedSurveyRequestMessage request; }; ```",
      "type": "object",
      "required": [
        "request",
        "request_signature"
      ],
      "properties": {
        "request": {
          "$ref": "#/definitions/TimeSlicedSurveyRequestMessage"
        },
        "request_signature": {
          "$ref": "#/definitions/Signature"
        }
      }
    },
    "SignedTimeSlicedSurveyResponseMessage": {
      "description": "SignedTimeSlicedSurveyResponseMessage is an XDR Struct defines as:\n\n```text struct SignedTimeSlicedSurveyResponseMessage { Signature responseSignature; TimeSlicedSurveyResponseMessage response; }; ```",
      "type": "object",
      "required": [
        "response",
        "response_signature"
      ],
      "properties": {
        "response": {
          "$ref": "#/definitions/TimeSlicedSurveyResponseMessage"
        },
        "response_signature": {
          "$ref": "#/definitions/Signature"
        }
      }
    },
    "SignedTimeSlicedSurveyStartCollectingMessage": {
      "description": "SignedTimeSlicedSurveyStartCollectingMessage is an XDR Struct defines as:\n\n```text struct SignedTimeSlicedSurveyStartCollectingMessage { Signature signature; TimeSlicedSurveyStartCollectingMessage startCollecting; }; ```",
      "type": "object",
      "required": [
        "signature",
        "start_collecting"
      ],
      "properties": {
        "signature": {
          "$ref": "#/definitions/Signature"
        },
        "start_collecting": {
          "$ref": "#/definitions/TimeSlicedSurveyStartCollectingMessage"
        }
      }
    },
    "SignedTimeSlicedSurveyStopCollectingMessage": {
      "description": "SignedTimeSlicedSurveyStopCollectingMessage is an XDR Struct defines as:\n\n```text struct SignedTimeSlicedSurveyStopCollectingMessage { Signature signature; TimeSlicedSurveyStopCollectingMessage stopCollecting; }; ```",
      "type": "object",
      "required": [
        "signature",
        "stop_collecting"
      ],
      "properties": {
        "signature": {
          "$ref": "#/definitions/Signature"
        },
        "stop_collecting": {
          "$ref": "#/definitions/TimeSlicedSurveyStopCollectingMessage"
        }
      }
    },
    "Signer": {
      "description": "Signer is an XDR Struct defines as:\n\n```text struct Signer { SignerKey key; uint32 weight; // really only need 1 byte }; ```",
      "type": "object",
      "required": [
        "key",
        "weight"
      ],
      "properties": {
        "key": {
          "$ref": "#/definitions/SignerKey"
        },
        "weight": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "SignerKey": {
      "type": "string"
    },
    "SorobanAddressCredentials": {
      "description": "SorobanAddressCredentials is an XDR Struct defines as:\n\n```text struct SorobanAddressCredentials { SCAddress address; int64 nonce; uint32 signatureExpirationLedger; SCVal signature; }; ```",
      "type": "object",
      "required": [
        "address",
        "nonce",
        "signature",
        "signature_expiration_ledger"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/ScAddress"
        },
        "nonce": {
          "type": "integer",
          "format": "int64"
        },
        "signature": {
          "$ref": "#/definitions/ScVal"
        },
        "signature_expiration_ledger": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "SorobanAuthorizationEntry": {
      "description": "SorobanAuthorizationEntry is an XDR Struct defines as:\n\n```text struct SorobanAuthorizationEntry { SorobanCredentials credentials; SorobanAuthorizedInvocation rootInvocation; }; ```",
      "type": "object",
      "required": [
        "credentials",
        "root_invocation"
      ],
      "properties": {
        "credentials": {
          "$ref": "#/definitions/SorobanCredentials"
        },
        "root_invocation": {
          "$ref": "#/definitions/SorobanAuthorizedInvocation"
        }
      }
    },
    "SorobanAuthorizedFunction": {
      "description": "SorobanAuthorizedFunction is an XDR Union defines as:\n\n```text union SorobanAuthorizedFunction switch (SorobanAuthorizedFunctionType type) { case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CONTRACT_FN: InvokeContractArgs contractFn; // This variant of auth payload for creating new contract instances // doesn't allow specifying the constructor arguments, creating contracts // with constructors that take arguments is only possible by authorizing // `SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN` // (protocol 22+). case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_HOST_FN: CreateContractArgs createContractHostFn; // This variant of auth payload for creating new contract instances // is only accepted in and after protocol 22. It allows authorizing the // contract constructor arguments. case SOROBAN_AUTHORIZED_FUNCTION_TYPE_CREATE_CONTRACT_V2_HOST_FN: CreateContractArgsV2 createContractV2HostFn; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "contract_fn"
          ],
          "properties": {
            "contract_fn": {
              "$ref": "#/definitions/InvokeContractArgs"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_contract_host_fn"
          ],
          "properties": {
            "create_contract_host_fn": {
              "$ref": "#/definitions/CreateContractArgs"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "create_contract_v2_host_fn"
          ],
          "properties": {
            "create_contract_v2_host_fn": {
              "$ref": "#/definitions/CreateContractArgsV2"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SorobanAuthorizedInvocation": {
      "description": "SorobanAuthorizedInvocation is an XDR Struct defines as:\n\n```text struct SorobanAuthorizedInvocation { SorobanAuthorizedFunction function; SorobanAuthorizedInvocation subInvocations<>; }; ```",
      "type": "object",
      "required": [
        "function",
        "sub_invocations"
      ],
      "properties": {
        "function": {
          "$ref": "#/definitions/SorobanAuthorizedFunction"
        },
        "sub_invocations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SorobanAuthorizedInvocation"
          },
          "maxItems": 4294967295
        }
      }
    },
    "SorobanCredentials": {
      "description": "SorobanCredentials is an XDR Union defines as:\n\n```text union SorobanCredentials switch (SorobanCredentialsType type) { case SOROBAN_CREDENTIALS_SOURCE_ACCOUNT: void; case SOROBAN_CREDENTIALS_ADDRESS: SorobanAddressCredentials address; }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "source_account"
          ]
        },
        {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "$ref": "#/definitions/SorobanAddressCredentials"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SorobanResources": {
      "description": "SorobanResources is an XDR Struct defines as:\n\n```text struct SorobanResources { // The ledger footprint of the transaction. LedgerFootprint footprint; // The maximum number of instructions this transaction can use uint32 instructions;\n\n// The maximum number of bytes this transaction can read from ledger uint32 readBytes; // The maximum number of bytes this transaction can write to ledger uint32 writeBytes; }; ```",
      "type": "object",
      "required": [
        "footprint",
        "instructions",
        "read_bytes",
        "write_bytes"
      ],
      "properties": {
        "footprint": {
          "$ref": "#/definitions/LedgerFootprint"
        },
        "instructions": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "read_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "write_bytes": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "SorobanResourcesExtV0": {
      "description": "SorobanResourcesExtV0 is an XDR Struct defines as:\n\n```text struct SorobanResourcesExtV0 { // Vector of indices representing what Soroban // entries in the footprint are archived, based on the // order of keys provided in the readWrite footprint. uint32 archivedSorobanEntries<>; }; ```",
      "type": "object",
      "required": [
        "archived_soroban_entries"
      ],
      "properties": {
        "archived_soroban_entries": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "maxItems": 4294967295
        }
      }
    },
    "SorobanTransactionData": {
      "description": "SorobanTransactionData is an XDR Struct defines as:\n\n```text struct SorobanTransactionData { union switch (int v) { case 0: void; case 1: SorobanResourcesExtV0 resourceExt; } ext; SorobanResources resources; // Amount of the transaction `fee` allocated to the Soroban resource fees. // The fraction of `resourceFee` corresponding to `resources` specified // above is *not* refundable (i.e. fees for instructions, ledger I/O), as // well as fees for the transaction size. // The remaining part of the fee is refundable and the charged value is // based on the actual consumption of refundable resources (events, ledger // rent bumps). // The `inclusionFee` used for prioritization of the transaction is defined // as `tx.fee - resourceFee`. int64 resourceFee; }; ```",
      "type": "object",
      "required": [
        "ext",
        "resource_fee",
        "resources"
      ],
      "properties": {
        "ext": {
          "$ref": "#/definitions/SorobanTransactionDataExt"
        },
        "resource_fee": {
          "type": "integer",
          "format": "int64"
        },
        "resources": {
          "$ref": "#/definitions/SorobanResources"
        }
      }
    },
    "SorobanTransactionDataExt": {
      "description": "SorobanTransactionDataExt is an XDR NestedUnion defines as:\n\n```text union switch (int v) { case 0: void; case 1: SorobanResourcesExtV0 resourceExt; } ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "v0"
          ]
        },
        {
          "type": "object",
          "required": [
            "v1"
          ],
          "properties": {
            "v1": {
              "$ref": "#/definitions/SorobanResourcesExtV0"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "String32": {
      "description": "String32 is an XDR Typedef defines as:\n\n```text typedef string string32<32>; ```",
      "$ref": "#/definitions/StringM<32>"
    },
    "String64": {
      "description": "String64 is an XDR Typedef defines as:\n\n```text typedef string string64<64>; ```",
      "$ref": "#/definitions/StringM<64>"
    },
    "StringM<100>": {
      "type": "string",
      "maxLength": 100
    },
    "StringM<28>": {
      "type": "string",
      "maxLength": 28
    },
    "StringM<32>": {
      "type": "string",
      "maxLength": 32
    },
    "StringM<4294967295>": {
      "type": "string",
      "maxLength": 4294967295
    },
    "StringM<64>": {
      "type": "string",
      "maxLength": 64
    },
    "SurveyMessageCommandType": {
      "description": "SurveyMessageCommandType is an XDR Enum defines as:\n\n```text enum SurveyMessageCommandType { SURVEY_TOPOLOGY = 0, TIME_SLICED_SURVEY_TOPOLOGY = 1 }; ```",
      "type": "string",
      "enum": [
        "survey_topology",
        "time_sliced_survey_topology"
      ]
    },
    "SurveyRequestMessage": {
      "description": "SurveyRequestMessage is an XDR Struct defines as:\n\n```text struct SurveyRequestMessage { NodeID surveyorPeerID; NodeID surveyedPeerID; uint32 ledgerNum; Curve25519Public encryptionKey; SurveyMessageCommandType commandType; }; ```",
      "type": "object",
      "required": [
        "command_type",
        "encryption_key",
        "ledger_num",
        "surveyed_peer_id",
        "surveyor_peer_id"
      ],
      "properties": {
        "command_type": {
          "$ref": "#/definitions/SurveyMessageCommandType"
        },
        "encryption_key": {
          "$ref": "#/definitions/Curve25519Public"
        },
        "ledger_num": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "surveyed_peer_id": {
          "$ref": "#/definitions/NodeId"
        },
        "surveyor_peer_id": {
          "$ref": "#/definitions/NodeId"
        }
      }
    },
    "SurveyResponseMessage": {
      "description": "SurveyResponseMessage is an XDR Struct defines as:\n\n```text struct SurveyResponseMessage { NodeID surveyorPeerID; NodeID surveyedPeerID; uint32 ledgerNum; SurveyMessageCommandType commandType; EncryptedBody encryptedBody; }; ```",
      "type": "object",
      "required": [
        "command_type",
        "encrypted_body",
        "ledger_num",
        "surveyed_peer_id",
        "surveyor_peer_id"
      ],
      "properties": {
        "command_type": {
          "$ref": "#/definitions/SurveyMessageCommandType"
        },
        "encrypted_body": {
          "$ref": "#/definitions/EncryptedBody"
        },
        "ledger_num": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "surveyed_peer_id": {
          "$ref": "#/definitions/NodeId"
        },
        "surveyor_peer_id": {
          "$ref": "#/definitions/NodeId"
        }
      }
    },
    "TimeBounds": {
      "description": "TimeBounds is an XDR Struct defines as:\n\n```text struct TimeBounds { TimePoint minTime; TimePoint maxTime; // 0 here means no maxTime }; ```",
      "type": "object",
      "required": [
        "max_time",
        "min_time"
      ],
      "properties": {
        "max_time": {
          "$ref": "#/definitions/TimePoint"
        },
        "min_time": {
          "$ref": "#/definitions/TimePoint"
        }
      }
    },
    "TimePoint": {
      "description": "TimePoint is an XDR Typedef defines as:\n\n```text typedef uint64 TimePoint; ```",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "TimeSlicedSurveyRequestMessage": {
      "description": "TimeSlicedSurveyRequestMessage is an XDR Struct defines as:\n\n```text struct TimeSlicedSurveyRequestMessage { SurveyRequestMessage request; uint32 nonce; uint32 inboundPeersIndex; uint32 outboundPeersIndex; }; ```",
      "type": "object",
      "required": [
        "inbound_peers_index",
        "nonce",
        "outbound_peers_index",
        "request"
      ],
      "properties": {
        "inbound_peers_index": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "nonce": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "outbound_peers_index": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "request": {
          "$ref": "#/definitions/SurveyRequestMessage"
        }
      }
    },
    "TimeSlicedSurveyResponseMessage": {
      "description": "TimeSlicedSurveyResponseMessage is an XDR Struct defines as:\n\n```text struct TimeSlicedSurveyResponseMessage { SurveyResponseMessage response; uint32 nonce; }; ```",
      "type": "object",
      "required": [
        "nonce",
        "response"
      ],
      "properties": {
        "nonce": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "response": {
          "$ref": "#/definitions/SurveyResponseMessage"
        }
      }
    },
    "TimeSlicedSurveyStartCollectingMessage": {
      "description": "TimeSlicedSurveyStartCollectingMessage is an XDR Struct defines as:\n\n```text struct TimeSlicedSurveyStartCollectingMessage { NodeID surveyorID; uint32 nonce; uint32 ledgerNum; }; ```",
      "type": "object",
      "required": [
        "ledger_num",
        "nonce",
        "surveyor_id"
      ],
      "properties": {
        "ledger_num": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "nonce": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "surveyor_id": {
          "$ref": "#/definitions/NodeId"
        }
      }
    },
    "TimeSlicedSurveyStopCollectingMessage": {
      "description": "TimeSlicedSurveyStopCollectingMessage is an XDR Struct defines as:\n\n```text struct TimeSlicedSurveyStopCollectingMessage { NodeID surveyorID; uint32 nonce; uint32 ledgerNum; }; ```",
      "type": "object",
      "required": [
        "ledger_num",
        "nonce",
        "surveyor_id"
      ],
      "properties": {
        "ledger_num": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "nonce": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "surveyor_id": {
          "$ref": "#/definitions/NodeId"
        }
      }
    },
    "Transaction": {
      "description": "Transaction is an XDR Struct defines as:\n\n```text struct Transaction { // account used to run the transaction MuxedAccount sourceAccount;\n\n// the fee the sourceAccount will pay uint32 fee;\n\n// sequence number to consume in the account SequenceNumber seqNum;\n\n// validity conditions Preconditions cond;\n\nMemo memo;\n\nOperation operations<MAX_OPS_PER_TX>;\n\nunion switch (int v) { case 0: void; case 1: SorobanTransactionData sorobanData; } ext; }; ```",
      "type": "object",
      "required": [
        "cond",
        "ext",
        "fee",
        "memo",
        "operations",
        "seq_num",
        "source_account"
      ],
      "properties": {
        "cond": {
          "$ref": "#/definitions/Preconditions"
        },
        "ext": {
          "$ref": "#/definitions/TransactionExt"
        },
        "fee": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "memo": {
          "$ref": "#/definitions/Memo"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "maxItems": 100
        },
        "seq_num": {
          "$ref": "#/definitions/SequenceNumber"
        },
        "source_account": {
          "$ref": "#/definitions/MuxedAccount"
        }
      }
    },
    "TransactionEnvelope": {
      "description": "TransactionEnvelope is an XDR Union defines as:\n\n```text union TransactionEnvelope switch (EnvelopeType type) { case ENVELOPE_TYPE_TX_V0: TransactionV0Envelope v0; case ENVELOPE_TYPE_TX: TransactionV1Envelope v1; case ENVELOPE_TYPE_TX_FEE_BUMP: FeeBumpTransactionEnvelope feeBump; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "tx_v0"
          ],
          "properties": {
            "tx_v0": {
              "$ref": "#/definitions/TransactionV0Envelope"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "tx"
          ],
          "properties": {
            "tx": {
              "$ref": "#/definitions/TransactionV1Envelope"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "tx_fee_bump"
          ],
          "properties": {
            "tx_fee_bump": {
              "$ref": "#/definitions/FeeBumpTransactionEnvelope"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransactionExt": {
      "description": "TransactionExt is an XDR NestedUnion defines as:\n\n```text union switch (int v) { case 0: void; case 1: SorobanTransactionData sorobanData; } ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "v0"
          ]
        },
        {
          "type": "object",
          "required": [
            "v1"
          ],
          "properties": {
            "v1": {
              "$ref": "#/definitions/SorobanTransactionData"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransactionPhase": {
      "description": "TransactionPhase is an XDR Union defines as:\n\n```text union TransactionPhase switch (int v) { case 0: TxSetComponent v0Components<>; case 1: ParallelTxsComponent parallelTxsComponent; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "v0"
          ],
          "properties": {
            "v0": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TxSetComponent"
              },
              "maxItems": 4294967295
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "v1"
          ],
          "properties": {
            "v1": {
              "$ref": "#/definitions/ParallelTxsComponent"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TransactionSet": {
      "description": "TransactionSet is an XDR Struct defines as:\n\n```text struct TransactionSet { Hash previousLedgerHash; TransactionEnvelope txs<>; }; ```",
      "type": "object",
      "required": [
        "previous_ledger_hash",
        "txs"
      ],
      "properties": {
        "previous_ledger_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "txs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionEnvelope"
          },
          "maxItems": 4294967295
        }
      }
    },
    "TransactionSetV1": {
      "description": "TransactionSetV1 is an XDR Struct defines as:\n\n```text struct TransactionSetV1 { Hash previousLedgerHash; TransactionPhase phases<>; }; ```",
      "type": "object",
      "required": [
        "phases",
        "previous_ledger_hash"
      ],
      "properties": {
        "phases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionPhase"
          },
          "maxItems": 4294967295
        },
        "previous_ledger_hash": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        }
      }
    },
    "TransactionV0": {
      "description": "TransactionV0 is an XDR Struct defines as:\n\n```text struct TransactionV0 { uint256 sourceAccountEd25519; uint32 fee; SequenceNumber seqNum; TimeBounds* timeBounds; Memo memo; Operation operations<MAX_OPS_PER_TX>; union switch (int v) { case 0: void; } ext; }; ```",
      "type": "object",
      "required": [
        "ext",
        "fee",
        "memo",
        "operations",
        "seq_num",
        "source_account_ed25519"
      ],
      "properties": {
        "ext": {
          "$ref": "#/definitions/TransactionV0Ext"
        },
        "fee": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "memo": {
          "$ref": "#/definitions/Memo"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "maxItems": 100
        },
        "seq_num": {
          "$ref": "#/definitions/SequenceNumber"
        },
        "source_account_ed25519": {
          "type": "string",
          "maxLength": 64,
          "minLength": 64,
          "contentEncoding": "hex",
          "contentMediaType": "application/binary"
        },
        "time_bounds": {
          "anyOf": [
            {
              "$ref": "#/definitions/TimeBounds"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "TransactionV0Envelope": {
      "description": "TransactionV0Envelope is an XDR Struct defines as:\n\n```text struct TransactionV0Envelope { TransactionV0 tx; /* Each decorated signature is a signature over the SHA256 hash of * a TransactionSignaturePayload */ DecoratedSignature signatures<20>; }; ```",
      "type": "object",
      "required": [
        "signatures",
        "tx"
      ],
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DecoratedSignature"
          },
          "maxItems": 20
        },
        "tx": {
          "$ref": "#/definitions/TransactionV0"
        }
      }
    },
    "TransactionV0Ext": {
      "description": "TransactionV0Ext is an XDR NestedUnion defines as:\n\n```text union switch (int v) { case 0: void; } ```",
      "type": "string",
      "enum": [
        "v0"
      ]
    },
    "TransactionV1Envelope": {
      "description": "TransactionV1Envelope is an XDR Struct defines as:\n\n```text struct TransactionV1Envelope { Transaction tx; /* Each decorated signature is a signature over the SHA256 hash of * a TransactionSignaturePayload */ DecoratedSignature signatures<20>; }; ```",
      "type": "object",
      "required": [
        "signatures",
        "tx"
      ],
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DecoratedSignature"
          },
          "maxItems": 20
        },
        "tx": {
          "$ref": "#/definitions/Transaction"
        }
      }
    },
    "TrustLineAsset": {
      "description": "TrustLineAsset is an XDR Union defines as:\n\n```text union TrustLineAsset switch (AssetType type) { case ASSET_TYPE_NATIVE: // Not credit void;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM4: AlphaNum4 alphaNum4;\n\ncase ASSET_TYPE_CREDIT_ALPHANUM12: AlphaNum12 alphaNum12;\n\ncase ASSET_TYPE_POOL_SHARE: PoolID liquidityPoolID;\n\n// add other asset types here in the future }; ```",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "native"
          ]
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum4"
          ],
          "properties": {
            "credit_alphanum4": {
              "$ref": "#/definitions/AlphaNum4"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "credit_alphanum12"
          ],
          "properties": {
            "credit_alphanum12": {
              "$ref": "#/definitions/AlphaNum12"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "pool_share"
          ],
          "properties": {
            "pool_share": {
              "$ref": "#/definitions/PoolId"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TxAdvertVector": {
      "description": "TxAdvertVector is an XDR Typedef defines as:\n\n```text typedef Hash TxAdvertVector<TX_ADVERT_VECTOR_MAX_SIZE>; ```",
      "type": "array",
      "items": {
        "type": "string",
        "maxLength": 64,
        "minLength": 64,
        "contentEncoding": "hex",
        "contentMediaType": "application/binary"
      },
      "maxItems": 1000
    },
    "TxDemandVector": {
      "description": "TxDemandVector is an XDR Typedef defines as:\n\n```text typedef Hash TxDemandVector<TX_DEMAND_VECTOR_MAX_SIZE>; ```",
      "type": "array",
      "items": {
        "type": "string",
        "maxLength": 64,
        "minLength": 64,
        "contentEncoding": "hex",
        "contentMediaType": "application/binary"
      },
      "maxItems": 1000
    },
    "TxSetComponent": {
      "description": "TxSetComponent is an XDR Union defines as:\n\n```text union TxSetComponent switch (TxSetComponentType type) { case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE: struct { int64* baseFee; TransactionEnvelope txs<>; } txsMaybeDiscountedFee; }; ```",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "txset_comp_txs_maybe_discounted_fee"
          ],
          "properties": {
            "txset_comp_txs_maybe_discounted_fee": {
              "$ref": "#/definitions/TxSetComponentTxsMaybeDiscountedFee"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TxSetComponentTxsMaybeDiscountedFee": {
      "description": "TxSetComponentTxsMaybeDiscountedFee is an XDR NestedStruct defines as:\n\n```text struct { int64* baseFee; TransactionEnvelope txs<>; } ```",
      "type": "object",
      "required": [
        "txs"
      ],
      "properties": {
        "base_fee": {
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "txs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionEnvelope"
          },
          "maxItems": 4294967295
        }
      }
    },
    "UInt128Parts": {
      "description": "UInt128Parts is an XDR Struct defines as:\n\n```text struct UInt128Parts { uint64 hi; uint64 lo; }; ```",
      "type": "object",
      "required": [
        "hi",
        "lo"
      ],
      "properties": {
        "hi": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lo": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "UInt256Parts": {
      "description": "UInt256Parts is an XDR Struct defines as:\n\n```text struct UInt256Parts { uint64 hi_hi; uint64 hi_lo; uint64 lo_hi; uint64 lo_lo; }; ```",
      "type": "object",
      "required": [
        "hi_hi",
        "hi_lo",
        "lo_hi",
        "lo_lo"
      ],
      "properties": {
        "hi_hi": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "hi_lo": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lo_hi": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "lo_lo": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Value": {
      "description": "Value is an XDR Typedef defines as:\n\n```text typedef opaque Value<>; ```",
      "type": "string",
      "contentEncoding": "hex",
      "contentMediaType": "application/binary"
    }
  }
}